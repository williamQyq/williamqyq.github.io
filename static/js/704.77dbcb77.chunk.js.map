{"version":3,"file":"static/js/704.77dbcb77.chunk.js","mappings":"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","sources":["component/socket/type.ts","component/utils/FormTable.tsx","component/utils/Layout.tsx","component/utils/cmpt.global.ts","component/utils/helper.js","pages/Bot/DealsTable.tsx","redux/actions/deal.action.ts"],"sourcesContent":["import {\r\n    ON_RETRIEVED_BB_ITEMS_ONLINE_PRICE,\r\n    ON_RETRIEVED_MS_ITEMS_ONLINE_PRICE,\r\n    RETRIEVE_BB_ITEMS_ONLINE_PRICE_ERROR,\r\n    RETRIEVE_MS_ITEMS_ONLINE_PRICE_ERROR\r\n} from \"@redux-action/types\"\r\n\r\nexport enum SocketAction {\r\n    subscribe = \"subscribe\",\r\n    dealsUpdated = \"dealsUpdated\",\r\n    retrievedBBItemsOnlinePrice = ON_RETRIEVED_BB_ITEMS_ONLINE_PRICE,\r\n    retrievedMSItemsOnlinePrice = ON_RETRIEVED_MS_ITEMS_ONLINE_PRICE,\r\n    retrievedBBItemsOnlinePriceErr = RETRIEVE_BB_ITEMS_ONLINE_PRICE_ERROR,\r\n    retrievedMSItemsOnlinePriceErr = RETRIEVE_MS_ITEMS_ONLINE_PRICE_ERROR\r\n\r\n}\r\n\r\nexport enum SocketRoom {\r\n    dealsRoom = \"dealsRoom\",\r\n}","import React from 'react';\r\nimport { ConnectedProps, connect } from 'react-redux';\r\nimport { Table, Input, Button, Space } from 'antd';\r\nimport type { InputRef } from 'antd';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport { saveUserTableSettings } from '@redux-action/deal.action';\r\nimport '@src/assets/FormTable.scss';\r\nimport { normalizeStringValue } from './helper';\r\n\r\nimport type { ColumnType, TableProps } from 'antd/es/table';\r\nimport { ExpandableConfig, FilterConfirmProps } from 'antd/es/table/interface';\r\n\r\ninterface IProps extends TableProps<any>, PropsFromRedux {\r\n    tableUserSettings?: Partial<TableProps<any>>;\r\n    handleRowClick?: (record: Record<string, string>) => void;\r\n}\r\ninterface TableUserSettingsType extends Record<string, string> {\r\n    searchText: string;\r\n    searchedRowId: string;\r\n    searchedColumn: string;\r\n}\r\ninterface IState extends TableUserSettingsType { };\r\n\r\nexport type ColumnTypeWithSearchable<T> = ColumnType<T> & {\r\n    dataIndex: string;\r\n    searchable?: boolean;\r\n    editable?: boolean;\r\n}\r\n// interface TableDataType extends Readonly<Record<string, string>> {\r\n//     _id: string;\r\n// }\r\nclass FormTable extends React.Component<IProps, IState> {\r\n    searchInput: React.RefObject<InputRef>;\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            searchText: '',\r\n            searchedRowId: '',\r\n            searchedColumn: '',\r\n        };\r\n        this.searchInput = React.createRef<InputRef>();\r\n    }\r\n\r\n    componentDidMount() {\r\n        const data = this.props.dataSource as { _id: string; }[];\r\n        if (data)\r\n            this.handleScrollPosition(data, { ...this.state });  //scroll to clicked row\r\n    }\r\n\r\n    componentDidUpdate<T = Record<string, string>>(_prevProps: Readonly<IProps>, prevState: Readonly<IState>) {\r\n\r\n        if (this.state.searchText !== prevState.searchText) {\r\n            this.props.saveUserTableSettings({\r\n                ...this.state\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description preserve the table user settings\r\n     * @status not completed\r\n     * @param tableUserSettings \r\n     */\r\n    setTableUserSettings = (tableUserSettings: TableUserSettingsType) => {\r\n        const { searchText, searchedRowId, searchedColumn } = tableUserSettings;\r\n        if (searchText !== \"\") {\r\n            this.setState({ searchText, searchedRowId, searchedColumn })\r\n        }\r\n    }\r\n\r\n    addSearchPropsToColumns = <T extends Record<string, string | number | undefined>>(\r\n        columns: ColumnTypeWithSearchable<T>[],\r\n        getColumnSearchProps: (dataIndex: string) => any\r\n    ) => {\r\n        return columns.map((col) => {\r\n            if (col.searchable) {\r\n                return {\r\n                    ...col,\r\n                    ...getColumnSearchProps(col.dataIndex)\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...col,\r\n            }\r\n        })\r\n    }\r\n\r\n    handleScrollPosition = <T extends { _id: string }>(\r\n        items: T[],\r\n        tableUserSettings: TableUserSettingsType\r\n    ) => {\r\n        if (tableUserSettings.searchedRowId !== \"\") {\r\n            let clickedItem = this.locateSearchedItem(items, tableUserSettings.searchedRowId);\r\n            this.setState({ searchedRowId: clickedItem._id });\r\n            this.scrollToTableRow(document, clickedItem.index);\r\n        }\r\n    }\r\n\r\n    locateSearchedItem = <T extends { _id: string }>(items: T[], searchedRowId: string) => {\r\n        const searchedItem = items.find(row => row._id === searchedRowId);\r\n        const index = items.findIndex(row => row._id === searchedRowId);\r\n        let searchItem = {\r\n            index: index ? index : 0,\r\n            _id: searchedItem ? searchedItem._id : \"\"\r\n        }\r\n\r\n        return searchItem;  //return default first index item.\r\n    }\r\n\r\n    scrollToTableRow = (document: Document, rowIndex: number) => {\r\n        const tableRowHight = 75.31;\r\n        let v = document.getElementsByClassName(\"ant-layout-content site-layout-content\")[0];\r\n        v.scrollTop = tableRowHight * (rowIndex - 0);\r\n    }\r\n\r\n    handleSearch = (\r\n        selectedKeys: string[],\r\n        confirm: (param?: FilterConfirmProps) => void,\r\n        dataIndex: string\r\n    ) => {\r\n        confirm();\r\n        let trimSearchText = normalizeStringValue(selectedKeys[0]);\r\n        this.setState({\r\n            searchText: trimSearchText,\r\n            searchedColumn: dataIndex,\r\n        });\r\n    };\r\n\r\n    handleReset = (clearFilters: (() => void) | undefined) => {\r\n        if (clearFilters)\r\n            clearFilters();\r\n        this.setState({ searchText: '' });\r\n    };\r\n\r\n\r\n    getColumnSearchProps = <T extends Record<string, string>>(dataIndex: string): ColumnType<T> => {\r\n        return {\r\n            filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n                <div style={{ padding: 8 }}>\r\n                    <Input\r\n                        ref={this.searchInput}\r\n                        placeholder={`Search ${dataIndex}`}\r\n                        value={selectedKeys[0]}\r\n                        onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [''])}\r\n                        onPressEnter={() => this.handleSearch(selectedKeys as string[], confirm, dataIndex)}\r\n                        style={{ marginBottom: 8, display: 'block' }}\r\n                    />\r\n                    <Space>\r\n                        <Button\r\n                            type=\"primary\"\r\n                            onClick={() => this.handleSearch(selectedKeys as string[], confirm, dataIndex)}\r\n                            icon={<SearchOutlined />}\r\n                            size=\"small\"\r\n                            style={{ width: 90 }}\r\n                        >Search</Button>\r\n                        <Button\r\n                            size=\"small\"\r\n                            style={{ width: 90 }}\r\n                            onClick={() => this.handleReset(clearFilters)}\r\n                        >Reset</Button>\r\n                        {/* <Button\r\n                            type=\"link\"\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                                confirm({ closeDropdown: false });\r\n                                this.setState({\r\n                                    searchText: selectedKeys[0],\r\n                                    searchedColumn: dataIndex,\r\n                                });\r\n                            }}\r\n                        >\r\n                            Filter\r\n                        </Button> */}\r\n                    </Space>\r\n                </div>\r\n            ),\r\n            filteredValue: this.state.searchedColumn === dataIndex ? [this.state.searchText] : [],\r\n            filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n            onFilter: (value, record) => {\r\n                if (value === undefined) return false;  //if empty searchText, filter no data\r\n                let isValueIncluded = record[dataIndex] ? (\r\n                    record[dataIndex].toString().toLowerCase().includes(value.toString().toLowerCase())\r\n                ) : (\r\n                    false\r\n                );\r\n                return isValueIncluded\r\n            },\r\n            onFilterDropdownOpenChange: visible => {\r\n                if (visible) {\r\n                    setTimeout(() => this.searchInput.current?.select(), 100);\r\n                }\r\n            },\r\n            render: (text, record) => (\r\n                this.state.searchedColumn === dataIndex ? (\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href={record.link}>\r\n                        <Highlighter\r\n                            highlightStyle={{ backgroundColor: '#c7edcc', padding: 0 }}\r\n                            searchWords={[this.state.searchText]}\r\n                            autoEscape\r\n                            textToHighlight={text ? text.toString() : ''}\r\n                        />\r\n                    </a>\r\n                ) : (\r\n                    this.state.searchedRowId === record._id ?\r\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href={record.link}>\r\n                            <Highlighter\r\n                                highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n                                searchWords={[text]}\r\n                                autoEscape\r\n                                textToHighlight={text ? text.toString() : ''}\r\n                            />\r\n                        </a>\r\n                        :\r\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href={record.link}>{text}</a>\r\n                ))\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            dataSource,\r\n            loading,\r\n            handleRowClick,\r\n            tableUserSettings } = this.props;\r\n        const columns = this.props.columns as ColumnTypeWithSearchable<Record<string, string | number | undefined>>[];\r\n        const searchPropsColumns = this.addSearchPropsToColumns(columns, this.getColumnSearchProps);\r\n\r\n        return (\r\n            <Table\r\n                dataSource={dataSource}\r\n                loading={loading}\r\n                showSorterTooltip\r\n                // pagination={pagination}\r\n                // expandable={expandable as ExpandableConfig<object> | undefined}\r\n                columns={searchPropsColumns}\r\n                onRow={handleRowClick ? (record) => ({\r\n                    onClick: () => handleRowClick(record as Record<string, string>)\r\n                }) : undefined}\r\n                {...tableUserSettings}\r\n            />\r\n        )\r\n    }\r\n}\r\nconst connector = connect(null, { saveUserTableSettings });\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\nexport default connector(FormTable);","import React from 'react';\r\nimport { Divider, Typography } from \"antd\";\r\nimport { PageHeader } from \"@ant-design/pro-components\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Row, Col } from 'antd';\r\n\r\nconst { Title } = Typography;\r\ninterface IProps {\r\n    title: string,\r\n    subTitle?: string\r\n}\r\nexport const ContentHeader: React.FC<IProps> = ({ title, subTitle }: IProps) => {\r\n\r\n    const navigate = useNavigate();\r\n    const handleGoBack = () => {\r\n        navigate(-1);\r\n    }\r\n    return (\r\n        <PageHeader\r\n            // className=\"site-page-header\"\r\n            style={{ width: '100%', paddingBlock: 0, paddingInline: 0 }}\r\n            onBack={handleGoBack}\r\n            title={\r\n                <Title level={2} style={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>{title}</Title>\r\n            }\r\n            subTitle={subTitle}\r\n        />\r\n    );\r\n}\r\n\r\nexport const SubContentHeader: React.FC<IProps> = ({ title, subTitle }) => {\r\n    return (\r\n        <Divider plain>\r\n            <PageHeader className=\"site-page-header\" title={title} subTitle={subTitle} />\r\n        </Divider>\r\n\r\n    );\r\n}\r\n\r\nexport const ContentLayout: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n    return (\r\n        <Row gutter={[24, 24]} style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <Col span={18}>\r\n                {children}\r\n            </Col>\r\n        </Row>\r\n    )\r\n}","import { BESTBUY, MICROSOFT, COSTCO, WALMART } from \"@src/redux/actions/types.js\";\r\n\r\nexport const storeType = {\r\n    BESTBUY,\r\n    MICROSOFT,\r\n    COSTCO,\r\n    WALMART\r\n}\r\n","import moment from \"moment\";\r\n\r\n\r\nexport const getUnixDate = (offset) => {\r\n    let date = new Date();\r\n    date.setHours(0, 0, 0, 0);\r\n    date.setDate(date.getDate() + offset);\r\n    return moment(date).format('x');\r\n}\r\n\r\nexport const normalizeStringValue = (value) => {\r\n    return value.replace(/^\\s+|\\s+$/g, \"\")\r\n}\r\n\r\nexport function normalizeObjectStringValuesToLowerCase(obj) {\r\n    Object.keys(obj).forEach((key) => {\r\n        if (typeof obj[key] === \"string\") {\r\n            let normalizeValue = obj[key].trim().toLowerCase();\r\n            obj[key] = normalizeValue;\r\n        }\r\n    })\r\n    return obj;\r\n}","import React from 'react';\r\nimport './Store.scss';\r\n//redux\r\nimport { connect, useDispatch, useSelector, ConnectedProps } from 'react-redux';\r\nimport {\r\n    saveUserTableSettings,\r\n    // addItemSpec,\r\n    handlePriceCrawlFinished,\r\n    handlePriceCrawlError,\r\n    signalPriceCrawler,\r\n} from '@redux-action/deal.action';\r\nimport { AppDispatch, DealsDataSourceType } from '@src/redux/interface';\r\nimport { BESTBUY, MICROSOFT, COSTCO, WALMART } from \"@redux-action/types.js\";\r\nimport { RootState } from '@src/redux/store/store';\r\n//Antd \r\nimport {\r\n    ImportOutlined,\r\n    LoadingOutlined\r\n} from '@ant-design/icons';\r\nimport { Tooltip, Typography, Tree, } from 'antd';\r\nimport { ColumnGroupType, ColumnType, TableProps } from 'antd/es/table';\r\nimport { BaseType } from 'antd/es/typography/Base';\r\nimport { DataNode } from 'antd/es/tree';\r\nimport { Key } from '@ant-design/pro-components';\r\nimport { CiMenuKebab } from 'react-icons/ci';\r\n\r\nimport { ContentHeader } from '@src/component/utils/Layout';\r\nimport WithNavigate, { WithNavigateProps } from '@src/component/auth/WithNavigate';\r\nimport { SocketContext } from '@src/component/socket/SocketProvider';\r\nimport FormTable, { ColumnTypeWithSearchable } from '@src/component/utils/FormTable';\r\n\r\nconst Text = Typography.Text;\r\n\r\nconst storeType = {\r\n    BESTBUY,\r\n    MICROSOFT,\r\n    COSTCO,\r\n    WALMART\r\n}\r\n\r\nexport const defaultTableSettings: TableProps<any> = {\r\n    showSorterTooltip: false,\r\n    pagination: {\r\n        defaultPageSize: 20,\r\n        showSizeChanger: true,\r\n        pageSizeOptions: ['10', '20', '50', '100'],\r\n        position: ['topRight', 'bottomRight']\r\n    },\r\n    size: \"middle\",\r\n    expandable: undefined\r\n    // scroll: { y: \"calc(100vh)\" }\r\n\r\n}\r\n\r\nconst tableColumns: ColumnTypeWithSearchable<DealsDataSourceType>[] = [\r\n    {\r\n        title: 'Name',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        width: '30%',\r\n        searchable: true\r\n    },\r\n    {\r\n        title: 'UPC | SKU',\r\n        dataIndex: 'upc',\r\n        key: 'upc',\r\n        width: '15%',\r\n        searchable: true\r\n    },\r\n    {\r\n        title: 'Price Diff',\r\n        dataIndex: 'priceDiff',\r\n        key: 'priceDiff',\r\n        width: '10%',\r\n        // defaultSortOrder: tableState.priceDiff,\r\n        sorter: (a: DealsDataSourceType, b: DealsDataSourceType) => a.priceDiff - b.priceDiff,\r\n        render: (priceDiff: number, record: DealsDataSourceType) => {\r\n            let priceDifferece: number = Math.round(priceDiff);\r\n            let textTypeProps: BaseType = record.isCurrentPriceLower ? \"success\" : \"danger\";\r\n            return (\r\n                <Text type={textTypeProps} > $ {priceDifferece} </Text>\r\n            )\r\n        }\r\n    },\r\n    {\r\n        title:\r\n            <Tooltip\r\n                placement=\"topLeft\"\r\n                title='Click to sort on price diff'\r\n            >\r\n                Current Price\r\n            </Tooltip>,\r\n        dataIndex: 'currentPrice',\r\n        key: 'currentPrice',\r\n        width: '10%',\r\n        // defaultSortOrder: tableState.currentPrice,\r\n        sorter: (a, b) => a.currentPrice - b.currentPrice,\r\n        render: (text, record) => (\r\n            record.isCurrentPriceLower ?\r\n                <Text type=\"success\" > $ {text} </Text>\r\n                :\r\n                <Text type=\"danger\" > $ {text} </Text>\r\n        )\r\n    },\r\n    {\r\n        title: 'Capture Date',\r\n        dataIndex: 'captureDate',\r\n        key: 'captureDate',\r\n        width: '10%',\r\n        // defaultSortOrder: tableState.captureDate,\r\n        sorter: (a, b) => Number(new Date(a.captureDate)) - Number(new Date(b.captureDate)),\r\n        sortDirections: ['descend', 'ascend', 'descend'],\r\n    }\r\n\r\n]\r\n\r\ninterface ICrawlerControlDropdownProps {\r\n    storeName: string;\r\n}\r\nexport const CrawlerControlDropdown: React.FC<ICrawlerControlDropdownProps> = ({ storeName }) => {\r\n\r\n    const dispatch = useDispatch<AppDispatch>()\r\n    const bestbuyOnlinePriceRetriving = useSelector((state: RootState) => state.bestbuy.onlinePriceLoading)\r\n    const microsoftOnlinePriceRetriving = useSelector((state: RootState) => state.microsoft.onlinePriceLoading)\r\n\r\n    //if puppeteer is retrieving online price on store return true else false\r\n    let isRetrievingDeals = ((selectedStore: string): boolean => {\r\n        switch (selectedStore) {\r\n            case storeType.BESTBUY:\r\n                return bestbuyOnlinePriceRetriving\r\n            case storeType.MICROSOFT:\r\n                return microsoftOnlinePriceRetriving\r\n            default:\r\n                return false;\r\n        }\r\n    })(storeName);\r\n\r\n    const handleSelectedMenuAction = (keys: Key[]) => {\r\n        switch (keys[0]) {\r\n            case \"crawl\":\r\n                dispatch(signalPriceCrawler(storeName));\r\n                break;\r\n        }\r\n    }\r\n\r\n    const treeData: DataNode[] = [\r\n        {\r\n            title: \"Bot Options\",\r\n            key: 'options',\r\n            children: [\r\n                {\r\n                    key: 'crawl',\r\n                    disabled: isRetrievingDeals ? isRetrievingDeals : false,\r\n                    icon: () => (isRetrievingDeals ? <LoadingOutlined /> : <ImportOutlined />),\r\n                    title: \"Initiate Bot\",\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <Tree\r\n            showIcon\r\n            defaultExpandAll\r\n            defaultSelectedKeys={['options']}\r\n            switcherIcon={<CiMenuKebab />}\r\n            treeData={treeData}\r\n            onSelect={(selectedKeys) => handleSelectedMenuAction(selectedKeys)}\r\n        />\r\n\r\n    );\r\n\r\n}\r\nexport interface DealsDataTableProps {\r\n    storeName: string;\r\n    items: readonly Record<string, string>[];\r\n    loading: boolean;\r\n}\r\n\r\ninterface IProps extends PropsFromRedux, DealsDataTableProps, WithNavigateProps { };\r\ninterface IState {\r\n    searchText: string;\r\n    searchedRowId: string;\r\n    searchedColumn: string;\r\n}\r\n// import BackTopHelper from 'component/utility/BackTop';\r\nclass DealsTable extends React.Component<IProps, IState> {\r\n    static contextType = SocketContext;\r\n    declare context: React.ContextType<typeof SocketContext>;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            searchText: '',\r\n            searchedRowId: '',\r\n            searchedColumn: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    handleRowClick = <T extends Record<string, string>>(record: T) => {\r\n        const { storeName, navigate, location } = this.props;\r\n        if (navigate) navigate(`detail/store/${storeName}/id/${record._id}/sku/${record.sku}`);\r\n    }\r\n\r\n    render() {\r\n        const { items, storeName, loading, userTableSettings } = this.props\r\n        return (\r\n            <>\r\n                <ContentHeader title={storeName} />\r\n                <CrawlerControlDropdown storeName={storeName} />\r\n                <FormTable\r\n                    {...defaultTableSettings}\r\n                    loading={loading}\r\n                    columns={tableColumns as (ColumnGroupType<unknown> | ColumnType<unknown>)[]}\r\n                    dataSource={items}\r\n                    handleRowClick={this.handleRowClick}\r\n\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state: RootState) => ({\r\n    userTableSettings: state.item.tableState,\r\n})\r\n\r\nconst connector = connect(mapStateToProps, {\r\n    handlePriceCrawlFinished,\r\n    handlePriceCrawlError,\r\n    saveUserTableSettings,\r\n    signalPriceCrawler,\r\n})\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\nexport default WithNavigate(connector(DealsTable));","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport moment from 'moment';\r\nimport { clearErrors, returnErrors } from './errorActions'\r\nimport {\r\n    // GET_ITEMS,\r\n    BESTBUY,\r\n    MICROSOFT,\r\n    GET_ERRORS,\r\n    ITEMS_LOADING,\r\n    SET_TABLE_STATE,\r\n    GET_MS_ITEM_DETAIL,\r\n    GET_BB_ITEM_DETAIL,\r\n    ADD_BB_ITEM_SPEC,\r\n    GET_MS_ITEMS_ONLINE_PRICE,\r\n    GET_BB_ITEMS_ONLINE_PRICE,\r\n    MS_ITEMS_ONLINE_PRICE_LOADING,\r\n    BB_ITEMS_ONLINE_PRICE_LOADING,\r\n    CLEAR_MICROSOFT_ERRORS,\r\n    CLEAR_BESTBUY_ERRORS,\r\n    ON_RETRIEVED_MS_ITEMS_ONLINE_PRICE,\r\n    ON_RETRIEVED_BB_ITEMS_ONLINE_PRICE,\r\n    SERVICE_UNAVAILABLE,\r\n    RETRIEVE_BB_ITEMS_ONLINE_PRICE_ERROR,\r\n    RETRIEVE_MS_ITEMS_ONLINE_PRICE_ERROR,\r\n} from './types.js';\r\nimport { tokenConfig } from './authActions';\r\nimport { clearMessages, returnMessages } from './messageActions';\r\nimport { RootState, AppDispatch } from '../store/store';\r\nimport { AnyAction, ThunkAction } from '@reduxjs/toolkit';\r\nimport { myAxiosError, myAxiosResponse } from '../interface.js';\r\n\r\nconst setItemsLoading = () => ({\r\n    type: ITEMS_LOADING\r\n});\r\n\r\nfunction getRoutesAndActionTypes(selectedStore: string) {\r\n    switch (selectedStore) {\r\n        case MICROSOFT:\r\n            return {\r\n                routes: 'microsoft',\r\n                type: {\r\n                    CLEAR_ERRORS: CLEAR_MICROSOFT_ERRORS,\r\n                    GET_ITEM_DETAIL: GET_MS_ITEM_DETAIL,\r\n                    GET_ITEM_ONLINE_PRICE: GET_MS_ITEMS_ONLINE_PRICE,\r\n                    ITEMS_ONLINE_PRICE_LOADING: MS_ITEMS_ONLINE_PRICE_LOADING,\r\n                    ON_RETRIEVED_ONLINE_PRICE: ON_RETRIEVED_MS_ITEMS_ONLINE_PRICE,\r\n                    FAILED_RETRIEVE_DEALS_INFO: RETRIEVE_MS_ITEMS_ONLINE_PRICE_ERROR\r\n                }\r\n            }\r\n        case BESTBUY:\r\n            return {\r\n                routes: 'bestbuy',\r\n                type: {\r\n                    CLEAR_ERRORS: CLEAR_BESTBUY_ERRORS,\r\n                    GET_ITEM_DETAIL: GET_BB_ITEM_DETAIL,\r\n                    ADD_ITEM_SPEC: ADD_BB_ITEM_SPEC,\r\n                    GET_ITEM_ONLINE_PRICE: GET_BB_ITEMS_ONLINE_PRICE,\r\n                    ITEMS_ONLINE_PRICE_LOADING: BB_ITEMS_ONLINE_PRICE_LOADING,\r\n                    ON_RETRIEVED_ONLINE_PRICE: ON_RETRIEVED_BB_ITEMS_ONLINE_PRICE,\r\n                    FAILED_RETRIEVE_DEALS_INFO: RETRIEVE_BB_ITEMS_ONLINE_PRICE_ERROR\r\n                }\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n}\r\n\r\nexport const signalPriceCrawler = (store: string): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch, getState: () => RootState) => {\r\n        const routerConfig = getRoutesAndActionTypes(store);    //get routes and action types on store selection\r\n        if (!routerConfig) return;\r\n        dispatch({ type: routerConfig.type.ITEMS_ONLINE_PRICE_LOADING });\r\n        axios.get(`/api/${routerConfig.routes}/crawl/v1/laptop/prices`, tokenConfig(getState))\r\n            .then((res: myAxiosResponse) => {\r\n                dispatch(returnMessages(res.data.msg, res.status, routerConfig.type.ITEMS_ONLINE_PRICE_LOADING));\r\n            })\r\n            .catch(err => {\r\n                dispatch(clearMessages())\r\n                dispatch(returnMessages(err.response.msg, err.response.status, GET_ERRORS))\r\n            })\r\n    }\r\n\r\nexport const handlePriceCrawlFinished = (store: string): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch) => {\r\n        const routerConfig = getRoutesAndActionTypes(store);    //get routes and action types on store selection\r\n        if (!routerConfig) return;\r\n        dispatch({\r\n            type: routerConfig.type.GET_ITEM_ONLINE_PRICE\r\n        })\r\n        dispatch(clearMessages())\r\n        dispatch(returnMessages(`${store} Bot Finished!`, 200, routerConfig.type.GET_ITEM_ONLINE_PRICE))\r\n    }\r\n\r\nexport const handlePriceCrawlError = (store: string): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch) => {\r\n        const routerConfig = getRoutesAndActionTypes(store);\r\n        if (!routerConfig) return;\r\n        dispatch({\r\n            type: routerConfig.type.GET_ITEM_ONLINE_PRICE\r\n        })\r\n        dispatch(clearErrors(routerConfig.type.CLEAR_ERRORS))\r\n        dispatch(returnErrors(`${store} Bot throw Exceptions`, 400, routerConfig.type.FAILED_RETRIEVE_DEALS_INFO))\r\n    }\r\n\r\nexport interface DealDataType {\r\n    link: string,\r\n    name: string,\r\n    sku: string,\r\n    qty: number,\r\n    upc: string,\r\n    price_timestamps: { price: number, date: Date | string }[],\r\n    currentPrice: number,\r\n    priceDiff: number,\r\n}\r\n\r\nexport const getDealDetail = (store: string, _id: string, abortSignal?: AbortSignal): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch, getState: () => RootState) => {\r\n        dispatch(setItemsLoading());\r\n        const routerConfig = getRoutesAndActionTypes(store);    //get routes and action types on store selection\r\n        axios.get<any, AxiosResponse<DealDataType>>(\r\n            `/api/${routerConfig?.routes}/v1/deal/detail/id/${_id}`,\r\n            {\r\n                ...tokenConfig(getState),\r\n                signal: abortSignal\r\n            })\r\n            .then((res: AxiosResponse<DealDataType>) => {\r\n                let deal = res.data;\r\n                deal.price_timestamps.forEach(ts => {\r\n                    ts.date = moment(ts.date).format(\"MMM Do YYYY HH:mm a\");\r\n                });\r\n                dispatch({\r\n                    type: routerConfig!.type.GET_ITEM_DETAIL,\r\n                    payload: deal\r\n                })\r\n            })\r\n            .catch((err: myAxiosError) => {\r\n                if (err.response) {\r\n                    dispatch(returnErrors(err.response.data.msg, err.response.status))\r\n                } else {\r\n                    console.error(err)\r\n                }\r\n            })\r\n    }\r\n\r\n// export const getItems = (store) => dispatch => {\r\n//     switch (store) {\r\n//         case MICROSOFT:\r\n//             getMSItems();\r\n//             break;\r\n//         case BESTBUY:\r\n//             getBestbuyDeals();\r\n//             break;\r\n//         default:\r\n//             let errorMsg = `[ERROR] getItems invalid ${store}`\r\n//             dispatch(returnErrors(errorMsg, 404));\r\n//     }\r\n// }\r\n\r\nexport const saveUserTableSettings = (settings: any): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch) => {\r\n        dispatch(setItemsLoading());\r\n        dispatch({\r\n            type: SET_TABLE_STATE,\r\n            payload: { ...settings }\r\n        })\r\n    }\r\n\r\nexport const addItemSpec = (record: unknown, store: string): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch, getState: () => RootState) => {\r\n        dispatch(setItemsLoading);\r\n        const routerConfig = getRoutesAndActionTypes(store)\r\n        if (!routerConfig) {\r\n            dispatch(clearMessages())\r\n            dispatch(returnMessages(\"Get Item Specification is currently not available \", 202, SERVICE_UNAVAILABLE))\r\n            return;\r\n        }\r\n\r\n        dispatch(returnMessages(\"Working on online price retrieval...\\nPlease wait.\", 202, routerConfig.type.ADD_ITEM_SPEC))\r\n        axios.put(`/api/${routerConfig.routes}/item-specification/`, record, tokenConfig(getState))\r\n            .then(res => {\r\n                dispatch({\r\n                    type: routerConfig.type.ADD_ITEM_SPEC,\r\n                    payload: res.data\r\n                })\r\n                dispatch(clearMessages())\r\n                dispatch(returnMessages(res.data.msg, res.status))\r\n            })\r\n            .catch(e => {\r\n                dispatch(returnErrors(e.response.data.msg, e.response.status))\r\n            })\r\n    }\r\n"],"names":["SocketAction","ON_RETRIEVED_BB_ITEMS_ONLINE_PRICE","ON_RETRIEVED_MS_ITEMS_ONLINE_PRICE","RETRIEVE_BB_ITEMS_ONLINE_PRICE_ERROR","RETRIEVE_MS_ITEMS_ONLINE_PRICE_ERROR","SocketRoom","FormTable","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","searchInput","setTableUserSettings","tableUserSettings","searchText","searchedRowId","searchedColumn","setState","addSearchPropsToColumns","columns","getColumnSearchProps","map","col","searchable","_objectSpread","dataIndex","handleScrollPosition","items","clickedItem","locateSearchedItem","_id","scrollToTableRow","document","index","searchedItem","find","row","findIndex","rowIndex","getElementsByClassName","scrollTop","handleSearch","selectedKeys","confirm","trimSearchText","normalizeStringValue","handleReset","clearFilters","filterDropdown","_ref","setSelectedKeys","_jsxs","style","padding","children","_jsx","Input","ref","placeholder","concat","value","onChange","e","target","onPressEnter","marginBottom","display","Space","Button","type","onClick","icon","SearchOutlined","size","width","filteredValue","state","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownOpenChange","visible","setTimeout","_this$searchInput$cur","current","select","render","text","rel","href","link","Highlighter","highlightStyle","backgroundColor","searchWords","autoEscape","textToHighlight","React","_createClass","key","data","this","dataSource","_prevProps","prevState","saveUserTableSettings","_this$props","loading","handleRowClick","searchPropsColumns","Table","showSorterTooltip","onRow","connect","Title","Typography","ContentHeader","title","subTitle","navigate","useNavigate","PageHeader","paddingBlock","paddingInline","onBack","level","whiteSpace","wordWrap","SubContentHeader","_ref2","Divider","plain","className","ContentLayout","_ref3","Row","gutter","justifyContent","Col","span","storeType","BESTBUY","MICROSOFT","COSTCO","WALMART","replace","normalizeObjectStringValuesToLowerCase","obj","Object","keys","forEach","normalizeValue","trim","Text","defaultTableSettings","pagination","defaultPageSize","showSizeChanger","pageSizeOptions","position","expandable","tableColumns","sorter","a","b","priceDiff","priceDifferece","Math","round","textTypeProps","isCurrentPriceLower","Tooltip","placement","currentPrice","Number","Date","captureDate","sortDirections","CrawlerControlDropdown","storeName","dispatch","useDispatch","bestbuyOnlinePriceRetriving","useSelector","bestbuy","onlinePriceLoading","microsoftOnlinePriceRetriving","microsoft","isRetrievingDeals","selectedStore","treeData","disabled","LoadingOutlined","ImportOutlined","Tree","showIcon","defaultExpandAll","defaultSelectedKeys","switcherIcon","CiMenuKebab","onSelect","signalPriceCrawler","DealsTable","location","sku","_this$props2","userTableSettings","_Fragment","contextType","SocketContext","connector","item","tableState","handlePriceCrawlFinished","handlePriceCrawlError","WithNavigate","setItemsLoading","ITEMS_LOADING","getRoutesAndActionTypes","routes","CLEAR_ERRORS","CLEAR_MICROSOFT_ERRORS","GET_ITEM_DETAIL","GET_MS_ITEM_DETAIL","GET_ITEM_ONLINE_PRICE","GET_MS_ITEMS_ONLINE_PRICE","ITEMS_ONLINE_PRICE_LOADING","MS_ITEMS_ONLINE_PRICE_LOADING","ON_RETRIEVED_ONLINE_PRICE","FAILED_RETRIEVE_DEALS_INFO","CLEAR_BESTBUY_ERRORS","GET_BB_ITEM_DETAIL","ADD_ITEM_SPEC","ADD_BB_ITEM_SPEC","GET_BB_ITEMS_ONLINE_PRICE","BB_ITEMS_ONLINE_PRICE_LOADING","store","_asyncToGenerator","_regeneratorRuntime","mark","_callee","getState","routerConfig","wrap","_context","prev","next","abrupt","axios","tokenConfig","then","res","returnMessages","msg","status","catch","err","clearMessages","response","GET_ERRORS","stop","_x","_x2","apply","arguments","_callee2","_context2","_x3","_callee3","_context3","clearErrors","returnErrors","_x4","getDealDetail","abortSignal","_ref4","_callee4","_context4","signal","deal","price_timestamps","ts","date","moment","format","payload","console","error","_x5","_x6","settings","_ref5","_callee5","_context5","SET_TABLE_STATE","_x7"],"sourceRoot":""}