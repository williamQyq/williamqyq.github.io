{"version":3,"file":"static/js/109.e178117d.chunk.js","mappings":"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","sources":["component/Operation/SkuManagement/OperationStatusBadge.jsx","component/Operation/SkuManagement/OperationAction.jsx","component/Operation/SkuManagement/OperationEditableEle.jsx","component/utils/FormTable.tsx","component/utils/Layout.tsx","component/utils/helper.js","redux/actions/deal.action.ts"],"sourcesContent":["import { Badge } from \"antd\";\r\n\r\nexport const StatusBadge = ({ record }) => {\r\n    return record.upc === undefined ?\r\n        <SubStatusBadge record={record} />\r\n        :\r\n        <MainStatusBadge record={record} />\r\n\r\n}\r\n\r\nexport const MainStatusBadge = ({ record }) => {\r\n    const MERCHANT = \"MERCHANT\";\r\n    const AMAZON = \"AMAZON\";\r\n    const hasWmsQty = () => {\r\n        return record.wmsQuantity > 0 ? true : false\r\n    }\r\n    const hasOffersActive = (fulfillmentChannel) => {\r\n        let hasActiveOffers = false;\r\n\r\n        //filter clean null offers\r\n        let identifiers = record.identifiers.filter(identifier =>\r\n            identifier.offers != null\r\n        )\r\n\r\n        //check if has active offers\r\n        for (let identifier of identifiers) {\r\n            if (hasActiveOffers)\r\n                break;\r\n            hasActiveOffers = identifier.offers.some(({ FulfillmentChannel }) => FulfillmentChannel === fulfillmentChannel)\r\n        }\r\n\r\n\r\n        return hasActiveOffers;\r\n    }\r\n\r\n\r\n    let isWmsQtyActive = hasWmsQty();\r\n    let isMerchantOfferActive = hasOffersActive(MERCHANT);\r\n    let isAmazonOfferActive = hasOffersActive(AMAZON)\r\n    let isOfferActive = isMerchantOfferActive || isAmazonOfferActive\r\n    let status = \"error\", msg = \"unknown\";\r\n\r\n    if (isWmsQtyActive && !isOfferActive) {\r\n        status = \"warning\";\r\n        msg = \"Under Process\";\r\n    } else if (!isWmsQtyActive && isMerchantOfferActive) {\r\n        status = \"error\";\r\n        msg = \"Zombie Asins\";\r\n    } else if (!isWmsQtyActive && !isOfferActive) {\r\n        status = \"default\";\r\n        msg = \"Out of Stock\";\r\n    } else if (isWmsQtyActive && isOfferActive) {\r\n        status = \"success\";\r\n        msg = \"Finished\";\r\n    } else if (!isWmsQtyActive && isAmazonOfferActive){\r\n        status =\"success\";\r\n        msg = \"Amazon\";\r\n    }\r\n\r\n    return <Badge status={status} text={msg} />\r\n\r\n}\r\nconst SubStatusBadge = ({ record }) => {\r\n    return <Badge status=\"processing\" />\r\n}\r\n\r\n\r\n","import { Space, Typography, Dropdown, Menu, Button } from \"antd\";\r\nimport { DownOutlined } from '@ant-design/icons';\r\n\r\nconst { Link } = Typography;\r\n\r\nconst ActionMenu = ({ actions, record }) => {\r\n    const editable = actions.isEditing(record);\r\n    const isEditing = actions.editingKey === \"\" ? false : true;\r\n\r\n    return editable ? (\r\n        <OnEditingActionMenu onClick={(e) => { e.stopPropagation() }} actions={actions} record={record} />\r\n    ) : (\r\n        <Space size=\"middle\" onClick={(e) => { e.stopPropagation() }}>\r\n            <Link\r\n                disabled\r\n                onClick={() => { actions.publish(record) }}\r\n            >\r\n                Publish\r\n            </Link>\r\n            <Link\r\n                disabled={isEditing}\r\n                onClick={() => { actions.edit(record) }}\r\n            >\r\n                Edit\r\n            </Link>\r\n            <Dropdown trigger={[\"click\"]} menu={DropDownMoreActionMenu}>\r\n                <Link>More <DownOutlined /></Link>\r\n            </Dropdown>\r\n        </Space>\r\n    )\r\n}\r\n\r\n/* \r\n * @usage: main table and nested child tables action  \r\n */\r\nconst DropDownMoreActionMenu = () => {\r\n    const handleDelete = () => {\r\n\r\n    }\r\n    const buttonSetting = {\r\n        block: true,\r\n        size: \"large\",\r\n        type: \"primary\",\r\n    }\r\n    const menuItems = [\r\n        {\r\n            key: 'action1',\r\n            label: (<Button {...buttonSetting}>Action 1</Button>)\r\n        },\r\n        {\r\n            key: 'delete',\r\n            label: (<Button {...buttonSetting} danger onClick={() => handleDelete()} >Delete</Button>)\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <Menu items={menuItems} />\r\n    );\r\n}\r\n\r\nconst OnEditingActionMenu = ({ actions, record }) => {\r\n    return (\r\n        <Space size=\"middle\" onClick={(e) => { e.stopPropagation() }}>\r\n            <Link onClick={(e) => { actions.save(record.key) }}>Save</Link>\r\n            <Link onClick={(e) => { actions.cancel(); }}>Cancel</Link>\r\n        </Space >\r\n    );\r\n}\r\n\r\n\r\nexport default ActionMenu;\r\n","import { InputNumber, Input, Form} from \"antd\";\r\nimport { StatusBadge } from \"@src/component/Operation/SkuManagement/OperationStatusBadge.jsx\";\r\nimport ActionMenu from \"@src/component/Operation/SkuManagement/OperationAction.jsx\";\r\n/*\r\n *  @usage: Nested child table elements\r\n */\r\nexport const EditableCell = ({\r\n    editing,\r\n    dataIndex,\r\n    title,\r\n    inputType,\r\n    record,\r\n    index,\r\n    children,\r\n    ...restProps\r\n}) => {\r\n    const inputNode = inputType === 'number' ? <InputNumber min={0} /> : <Input />;\r\n    return (\r\n        <td {...restProps}>\r\n            {editing ? (\r\n                <Form.Item\r\n                    name={dataIndex}\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: `Please Input ${title}!`,\r\n                        },\r\n                    ]}\r\n                    style={{ \"marginBottom\": 0 }}\r\n                    onClick={(e) => { e.stopPropagation() }}\r\n                >\r\n                    {inputNode}\r\n                </Form.Item>\r\n            ) : (\r\n                children\r\n            )}\r\n        </td>\r\n    );\r\n};\r\n\r\n/*  \r\n * @usage: Main Table\r\n * @desc: Columns of parent table\r\n */\r\nconst mergedColumns = (columns, actions) => {\r\n\r\n    return columns.map((col) => {\r\n        if (!col.editable) {\r\n            return col;\r\n        }\r\n\r\n        return {\r\n            ...col,\r\n            onCell: (record) => ({\r\n                record,\r\n                inputType: col.inputType ? col.inputType : \"text\",\r\n                dataIndex: col.dataIndex,\r\n                title: col.title,\r\n                editing: actions.isEditing(record),\r\n            }),\r\n\r\n        }\r\n    });\r\n\r\n}\r\n\r\nexport const mainColumns = (actions) => {\r\n    const columns = [\r\n        {\r\n            title: 'Upc',\r\n            dataIndex: 'upc',\r\n            editable: true,\r\n            width: '40%',\r\n            searchable: true\r\n        },\r\n        // {\r\n        //     title: 'Name',\r\n        //     dataIndex: 'name',\r\n        //     editable: true,\r\n        // },\r\n        {\r\n            title: 'WMS Quantity',\r\n            dataIndex: 'wmsQuantity',\r\n            editable: false,\r\n            width: '10%',\r\n            sorter: (a, b) => {\r\n                if (a.wmsQuantity === undefined) {\r\n                    return -1;\r\n                } else if (b.wmsQuantity === undefined) {\r\n                    return 1;\r\n                }\r\n                return a.wmsQuantity - b.wmsQuantity\r\n            }\r\n            ,\r\n            searchable: true,\r\n            defaultSortOrder: 'descend'\r\n            // sortDirections: ['descend', 'ascend', 'descend']\r\n        },\r\n        {\r\n            title: 'Unit Cost',\r\n            dataIndex: 'unitCost',\r\n            editable: false,\r\n            width: '10%',\r\n        },\r\n        // {\r\n        //     title: 'Settlement Rate Universal',\r\n        //     dataIndex: 'settleRateUniv',\r\n        //     editable: true,\r\n        //     inputType: \"number\"\r\n        // },\r\n        {\r\n            title: 'Status',\r\n            dataIndex: 'status',\r\n            key: 'state',\r\n            width: '20%',\r\n            // searchable: true,\r\n            render: (_, record) => {\r\n                return <StatusBadge record={record} />\r\n            }\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            width: '20%',\r\n            render: (_, record) => <ActionMenu actions={actions} record={record} />,\r\n        },\r\n    ];\r\n    return mergedColumns(columns, actions);\r\n}\r\nexport const nestedColumns = (actions) => {\r\n    const columns = [\r\n        {\r\n            title: 'Asin',\r\n            dataIndex: 'asin',\r\n            key: 'asin',\r\n            editable: false,\r\n            width: '20%',\r\n        },\r\n        {\r\n            title: 'Sku',\r\n            dataIndex: 'SellerSKU',\r\n            key: 'sku',\r\n            editable: false,\r\n            width: '30%',\r\n        },\r\n        {\r\n            title: 'Fulfillment Channel',\r\n            dataIndex: 'FulfillmentChannel',\r\n            key: 'fulfillmentChannel',\r\n            editable: false,\r\n            width: '15%',\r\n            filters: [\r\n                {\r\n                    text: 'Amazon',\r\n                    value: 'AMAZON',\r\n                },\r\n                {\r\n                    text: 'Merchant',\r\n                    value: 'MERCHANT',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.FulfillmentChannel.includes(value)\r\n\r\n        },\r\n        {\r\n            title: 'Amazon Regular Price',\r\n            dataIndex: ['RegularPrice', 'Amount'],\r\n            key: 'amzRegularPrice',\r\n            editable: false,\r\n            width: '15%',\r\n        },\r\n        // {\r\n        //     title: 'Settlement Rate',\r\n        //     dataIndex: 'settlementRate',\r\n        //     key: 'settlementRate',\r\n        //     editable: true\r\n        // },\r\n        // {\r\n        //     title: 'Settlement Price',\r\n        //     dataIndex: 'settlementPrice',\r\n        //     key: 'settlementPrice',\r\n        //     editable: true\r\n\r\n        // },\r\n        {\r\n            title: 'Status',\r\n            dataIndex: 'status',\r\n            key: 'state',\r\n            width: '5%',\r\n            render: (_, record) => <StatusBadge record={record} />\r\n\r\n        },\r\n        {\r\n            title: 'Operation',\r\n            dataIndex: 'operation',\r\n            key: 'operation',\r\n            width: '15%',\r\n            render: (_, record) => <ActionMenu actions={actions} record={record} />\r\n        }\r\n    ];\r\n    return mergedColumns(columns, actions)\r\n}","import React from 'react';\r\nimport { ConnectedProps, connect } from 'react-redux';\r\nimport { Table, Input, Button, Space } from 'antd';\r\nimport type { InputRef } from 'antd';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport { saveUserTableSettings } from '@redux-action/deal.action';\r\nimport '@src/assets/FormTable.scss';\r\nimport { normalizeStringValue } from './helper';\r\n\r\nimport type { ColumnType, TableProps } from 'antd/es/table';\r\nimport { ExpandableConfig, FilterConfirmProps } from 'antd/es/table/interface';\r\n\r\ninterface IProps extends TableProps<any>, PropsFromRedux {\r\n    tableUserSettings?: Partial<TableProps<any>>;\r\n    handleRowClick?: (record: Record<string, string>) => void;\r\n}\r\ninterface TableUserSettingsType extends Record<string, string> {\r\n    searchText: string;\r\n    searchedRowId: string;\r\n    searchedColumn: string;\r\n}\r\ninterface IState extends TableUserSettingsType { };\r\n\r\nexport type ColumnTypeWithSearchable<T> = ColumnType<T> & {\r\n    dataIndex: string;\r\n    searchable?: boolean;\r\n    editable?: boolean;\r\n}\r\n// interface TableDataType extends Readonly<Record<string, string>> {\r\n//     _id: string;\r\n// }\r\nclass FormTable extends React.Component<IProps, IState> {\r\n    searchInput: React.RefObject<InputRef>;\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            searchText: '',\r\n            searchedRowId: '',\r\n            searchedColumn: '',\r\n        };\r\n        this.searchInput = React.createRef<InputRef>();\r\n    }\r\n\r\n    componentDidMount() {\r\n        const data = this.props.dataSource as { _id: string; }[];\r\n        if (data)\r\n            this.handleScrollPosition(data, { ...this.state });  //scroll to clicked row\r\n    }\r\n\r\n    componentDidUpdate<T = Record<string, string>>(_prevProps: Readonly<IProps>, prevState: Readonly<IState>) {\r\n\r\n        if (this.state.searchText !== prevState.searchText) {\r\n            this.props.saveUserTableSettings({\r\n                ...this.state\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description preserve the table user settings\r\n     * @status not completed\r\n     * @param tableUserSettings \r\n     */\r\n    setTableUserSettings = (tableUserSettings: TableUserSettingsType) => {\r\n        const { searchText, searchedRowId, searchedColumn } = tableUserSettings;\r\n        if (searchText !== \"\") {\r\n            this.setState({ searchText, searchedRowId, searchedColumn })\r\n        }\r\n    }\r\n\r\n    addSearchPropsToColumns = <T extends Record<string, string | number | undefined>>(\r\n        columns: ColumnTypeWithSearchable<T>[],\r\n        getColumnSearchProps: (dataIndex: string) => any\r\n    ) => {\r\n        return columns.map((col) => {\r\n            if (col.searchable) {\r\n                return {\r\n                    ...col,\r\n                    ...getColumnSearchProps(col.dataIndex)\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...col,\r\n            }\r\n        })\r\n    }\r\n\r\n    handleScrollPosition = <T extends { _id: string }>(\r\n        items: T[],\r\n        tableUserSettings: TableUserSettingsType\r\n    ) => {\r\n        if (tableUserSettings.searchedRowId !== \"\") {\r\n            let clickedItem = this.locateSearchedItem(items, tableUserSettings.searchedRowId);\r\n            this.setState({ searchedRowId: clickedItem._id });\r\n            this.scrollToTableRow(document, clickedItem.index);\r\n        }\r\n    }\r\n\r\n    locateSearchedItem = <T extends { _id: string }>(items: T[], searchedRowId: string) => {\r\n        const searchedItem = items.find(row => row._id === searchedRowId);\r\n        const index = items.findIndex(row => row._id === searchedRowId);\r\n        let searchItem = {\r\n            index: index ? index : 0,\r\n            _id: searchedItem ? searchedItem._id : \"\"\r\n        }\r\n\r\n        return searchItem;  //return default first index item.\r\n    }\r\n\r\n    scrollToTableRow = (document: Document, rowIndex: number) => {\r\n        const tableRowHight = 75.31;\r\n        let v = document.getElementsByClassName(\"ant-layout-content site-layout-content\")[0];\r\n        v.scrollTop = tableRowHight * (rowIndex - 0);\r\n    }\r\n\r\n    handleSearch = (\r\n        selectedKeys: string[],\r\n        confirm: (param?: FilterConfirmProps) => void,\r\n        dataIndex: string\r\n    ) => {\r\n        confirm();\r\n        let trimSearchText = normalizeStringValue(selectedKeys[0]);\r\n        this.setState({\r\n            searchText: trimSearchText,\r\n            searchedColumn: dataIndex,\r\n        });\r\n    };\r\n\r\n    handleReset = (clearFilters: (() => void) | undefined) => {\r\n        if (clearFilters)\r\n            clearFilters();\r\n        this.setState({ searchText: '' });\r\n    };\r\n\r\n\r\n    getColumnSearchProps = <T extends Record<string, string>>(dataIndex: string): ColumnType<T> => {\r\n        return {\r\n            filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n                <div style={{ padding: 8 }}>\r\n                    <Input\r\n                        ref={this.searchInput}\r\n                        placeholder={`Search ${dataIndex}`}\r\n                        value={selectedKeys[0]}\r\n                        onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [''])}\r\n                        onPressEnter={() => this.handleSearch(selectedKeys as string[], confirm, dataIndex)}\r\n                        style={{ marginBottom: 8, display: 'block' }}\r\n                    />\r\n                    <Space>\r\n                        <Button\r\n                            type=\"primary\"\r\n                            onClick={() => this.handleSearch(selectedKeys as string[], confirm, dataIndex)}\r\n                            icon={<SearchOutlined />}\r\n                            size=\"small\"\r\n                            style={{ width: 90 }}\r\n                        >Search</Button>\r\n                        <Button\r\n                            size=\"small\"\r\n                            style={{ width: 90 }}\r\n                            onClick={() => this.handleReset(clearFilters)}\r\n                        >Reset</Button>\r\n                        {/* <Button\r\n                            type=\"link\"\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                                confirm({ closeDropdown: false });\r\n                                this.setState({\r\n                                    searchText: selectedKeys[0],\r\n                                    searchedColumn: dataIndex,\r\n                                });\r\n                            }}\r\n                        >\r\n                            Filter\r\n                        </Button> */}\r\n                    </Space>\r\n                </div>\r\n            ),\r\n            filteredValue: this.state.searchedColumn === dataIndex ? [this.state.searchText] : [],\r\n            filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n            onFilter: (value, record) => {\r\n                if (value === undefined) return false;  //if empty searchText, filter no data\r\n                let isValueIncluded = record[dataIndex] ? (\r\n                    record[dataIndex].toString().toLowerCase().includes(value.toString().toLowerCase())\r\n                ) : (\r\n                    false\r\n                );\r\n                return isValueIncluded\r\n            },\r\n            onFilterDropdownOpenChange: visible => {\r\n                if (visible) {\r\n                    setTimeout(() => this.searchInput.current?.select(), 100);\r\n                }\r\n            },\r\n            render: (text, record) => (\r\n                this.state.searchedColumn === dataIndex ? (\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href={record.link}>\r\n                        <Highlighter\r\n                            highlightStyle={{ backgroundColor: '#c7edcc', padding: 0 }}\r\n                            searchWords={[this.state.searchText]}\r\n                            autoEscape\r\n                            textToHighlight={text ? text.toString() : ''}\r\n                        />\r\n                    </a>\r\n                ) : (\r\n                    this.state.searchedRowId === record._id ?\r\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href={record.link}>\r\n                            <Highlighter\r\n                                highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n                                searchWords={[text]}\r\n                                autoEscape\r\n                                textToHighlight={text ? text.toString() : ''}\r\n                            />\r\n                        </a>\r\n                        :\r\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href={record.link}>{text}</a>\r\n                ))\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            dataSource,\r\n            loading,\r\n            handleRowClick,\r\n            tableUserSettings } = this.props;\r\n        const columns = this.props.columns as ColumnTypeWithSearchable<Record<string, string | number | undefined>>[];\r\n        const searchPropsColumns = this.addSearchPropsToColumns(columns, this.getColumnSearchProps);\r\n\r\n        return (\r\n            <Table\r\n                dataSource={dataSource}\r\n                loading={loading}\r\n                showSorterTooltip\r\n                // pagination={pagination}\r\n                // expandable={expandable as ExpandableConfig<object> | undefined}\r\n                columns={searchPropsColumns}\r\n                onRow={handleRowClick ? (record) => ({\r\n                    onClick: () => handleRowClick(record as Record<string, string>)\r\n                }) : undefined}\r\n                {...tableUserSettings}\r\n            />\r\n        )\r\n    }\r\n}\r\nconst connector = connect(null, { saveUserTableSettings });\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\nexport default connector(FormTable);","import React from 'react';\r\nimport { Divider, Typography } from \"antd\";\r\nimport { PageHeader } from \"@ant-design/pro-components\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Row, Col } from 'antd';\r\n\r\nconst { Title } = Typography;\r\ninterface IProps {\r\n    title: string,\r\n    subTitle?: string\r\n}\r\nexport const ContentHeader: React.FC<IProps> = ({ title, subTitle }: IProps) => {\r\n\r\n    const navigate = useNavigate();\r\n    const handleGoBack = () => {\r\n        navigate(-1);\r\n    }\r\n    return (\r\n        <PageHeader\r\n            // className=\"site-page-header\"\r\n            style={{ width: '100%', paddingBlock: 0, paddingInline: 0 }}\r\n            onBack={handleGoBack}\r\n            title={\r\n                <Title level={2} style={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>{title}</Title>\r\n            }\r\n            subTitle={subTitle}\r\n        />\r\n    );\r\n}\r\n\r\nexport const SubContentHeader: React.FC<IProps> = ({ title, subTitle }) => {\r\n    return (\r\n        <Divider plain>\r\n            <PageHeader className=\"site-page-header\" title={title} subTitle={subTitle} />\r\n        </Divider>\r\n\r\n    );\r\n}\r\n\r\nexport const ContentLayout: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n    return (\r\n        <Row gutter={[24, 24]} style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <Col span={18}>\r\n                {children}\r\n            </Col>\r\n        </Row>\r\n    )\r\n}","import moment from \"moment\";\r\n\r\n\r\nexport const getUnixDate = (offset) => {\r\n    let date = new Date();\r\n    date.setHours(0, 0, 0, 0);\r\n    date.setDate(date.getDate() + offset);\r\n    return moment(date).format('x');\r\n}\r\n\r\nexport const normalizeStringValue = (value) => {\r\n    return value.replace(/^\\s+|\\s+$/g, \"\")\r\n}\r\n\r\nexport function normalizeObjectStringValuesToLowerCase(obj) {\r\n    Object.keys(obj).forEach((key) => {\r\n        if (typeof obj[key] === \"string\") {\r\n            let normalizeValue = obj[key].trim().toLowerCase();\r\n            obj[key] = normalizeValue;\r\n        }\r\n    })\r\n    return obj;\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport moment from 'moment';\r\nimport { clearErrors, returnErrors } from './errorActions'\r\nimport {\r\n    // GET_ITEMS,\r\n    BESTBUY,\r\n    MICROSOFT,\r\n    GET_ERRORS,\r\n    ITEMS_LOADING,\r\n    SET_TABLE_STATE,\r\n    GET_MS_ITEM_DETAIL,\r\n    GET_BB_ITEM_DETAIL,\r\n    ADD_BB_ITEM_SPEC,\r\n    GET_MS_ITEMS_ONLINE_PRICE,\r\n    GET_BB_ITEMS_ONLINE_PRICE,\r\n    MS_ITEMS_ONLINE_PRICE_LOADING,\r\n    BB_ITEMS_ONLINE_PRICE_LOADING,\r\n    CLEAR_MICROSOFT_ERRORS,\r\n    CLEAR_BESTBUY_ERRORS,\r\n    ON_RETRIEVED_MS_ITEMS_ONLINE_PRICE,\r\n    ON_RETRIEVED_BB_ITEMS_ONLINE_PRICE,\r\n    SERVICE_UNAVAILABLE,\r\n    RETRIEVE_BB_ITEMS_ONLINE_PRICE_ERROR,\r\n    RETRIEVE_MS_ITEMS_ONLINE_PRICE_ERROR,\r\n} from './types.js';\r\nimport { tokenConfig } from './authActions';\r\nimport { clearMessages, returnMessages } from './messageActions';\r\nimport { RootState, AppDispatch } from '../store/store';\r\nimport { AnyAction, ThunkAction } from '@reduxjs/toolkit';\r\nimport { myAxiosError, myAxiosResponse } from '../interface.js';\r\n\r\nconst setItemsLoading = () => ({\r\n    type: ITEMS_LOADING\r\n});\r\n\r\nfunction getRoutesAndActionTypes(selectedStore: string) {\r\n    switch (selectedStore) {\r\n        case MICROSOFT:\r\n            return {\r\n                routes: 'microsoft',\r\n                type: {\r\n                    CLEAR_ERRORS: CLEAR_MICROSOFT_ERRORS,\r\n                    GET_ITEM_DETAIL: GET_MS_ITEM_DETAIL,\r\n                    GET_ITEM_ONLINE_PRICE: GET_MS_ITEMS_ONLINE_PRICE,\r\n                    ITEMS_ONLINE_PRICE_LOADING: MS_ITEMS_ONLINE_PRICE_LOADING,\r\n                    ON_RETRIEVED_ONLINE_PRICE: ON_RETRIEVED_MS_ITEMS_ONLINE_PRICE,\r\n                    FAILED_RETRIEVE_DEALS_INFO: RETRIEVE_MS_ITEMS_ONLINE_PRICE_ERROR\r\n                }\r\n            }\r\n        case BESTBUY:\r\n            return {\r\n                routes: 'bestbuy',\r\n                type: {\r\n                    CLEAR_ERRORS: CLEAR_BESTBUY_ERRORS,\r\n                    GET_ITEM_DETAIL: GET_BB_ITEM_DETAIL,\r\n                    ADD_ITEM_SPEC: ADD_BB_ITEM_SPEC,\r\n                    GET_ITEM_ONLINE_PRICE: GET_BB_ITEMS_ONLINE_PRICE,\r\n                    ITEMS_ONLINE_PRICE_LOADING: BB_ITEMS_ONLINE_PRICE_LOADING,\r\n                    ON_RETRIEVED_ONLINE_PRICE: ON_RETRIEVED_BB_ITEMS_ONLINE_PRICE,\r\n                    FAILED_RETRIEVE_DEALS_INFO: RETRIEVE_BB_ITEMS_ONLINE_PRICE_ERROR\r\n                }\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n}\r\n\r\nexport const signalPriceCrawler = (store: string): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch, getState: () => RootState) => {\r\n        const routerConfig = getRoutesAndActionTypes(store);    //get routes and action types on store selection\r\n        if (!routerConfig) return;\r\n        dispatch({ type: routerConfig.type.ITEMS_ONLINE_PRICE_LOADING });\r\n        axios.get(`/api/${routerConfig.routes}/crawl/v1/laptop/prices`, tokenConfig(getState))\r\n            .then((res: myAxiosResponse) => {\r\n                dispatch(returnMessages(res.data.msg, res.status, routerConfig.type.ITEMS_ONLINE_PRICE_LOADING));\r\n            })\r\n            .catch(err => {\r\n                dispatch(clearMessages())\r\n                dispatch(returnMessages(err.response.msg, err.response.status, GET_ERRORS))\r\n            })\r\n    }\r\n\r\nexport const handlePriceCrawlFinished = (store: string): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch) => {\r\n        const routerConfig = getRoutesAndActionTypes(store);    //get routes and action types on store selection\r\n        if (!routerConfig) return;\r\n        dispatch({\r\n            type: routerConfig.type.GET_ITEM_ONLINE_PRICE\r\n        })\r\n        dispatch(clearMessages())\r\n        dispatch(returnMessages(`${store} Bot Finished!`, 200, routerConfig.type.GET_ITEM_ONLINE_PRICE))\r\n    }\r\n\r\nexport const handlePriceCrawlError = (store: string): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch) => {\r\n        const routerConfig = getRoutesAndActionTypes(store);\r\n        if (!routerConfig) return;\r\n        dispatch({\r\n            type: routerConfig.type.GET_ITEM_ONLINE_PRICE\r\n        })\r\n        dispatch(clearErrors(routerConfig.type.CLEAR_ERRORS))\r\n        dispatch(returnErrors(`${store} Bot throw Exceptions`, 400, routerConfig.type.FAILED_RETRIEVE_DEALS_INFO))\r\n    }\r\n\r\nexport interface DealDataType {\r\n    link: string,\r\n    name: string,\r\n    sku: string,\r\n    qty: number,\r\n    upc: string,\r\n    price_timestamps: { price: number, date: Date | string }[],\r\n    currentPrice: number,\r\n    priceDiff: number,\r\n}\r\n\r\nexport const getDealDetail = (store: string, _id: string, abortSignal?: AbortSignal): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch, getState: () => RootState) => {\r\n        dispatch(setItemsLoading());\r\n        const routerConfig = getRoutesAndActionTypes(store);    //get routes and action types on store selection\r\n        axios.get<any, AxiosResponse<DealDataType>>(\r\n            `/api/${routerConfig?.routes}/v1/deal/detail/id/${_id}`,\r\n            {\r\n                ...tokenConfig(getState),\r\n                signal: abortSignal\r\n            })\r\n            .then((res: AxiosResponse<DealDataType>) => {\r\n                let deal = res.data;\r\n                deal.price_timestamps.forEach(ts => {\r\n                    ts.date = moment(ts.date).format(\"MMM Do YYYY HH:mm a\");\r\n                });\r\n                dispatch({\r\n                    type: routerConfig!.type.GET_ITEM_DETAIL,\r\n                    payload: deal\r\n                })\r\n            })\r\n            .catch((err: myAxiosError) => {\r\n                if (err.response) {\r\n                    dispatch(returnErrors(err.response.data.msg, err.response.status))\r\n                } else {\r\n                    console.error(err)\r\n                }\r\n            })\r\n    }\r\n\r\n// export const getItems = (store) => dispatch => {\r\n//     switch (store) {\r\n//         case MICROSOFT:\r\n//             getMSItems();\r\n//             break;\r\n//         case BESTBUY:\r\n//             getBestbuyDeals();\r\n//             break;\r\n//         default:\r\n//             let errorMsg = `[ERROR] getItems invalid ${store}`\r\n//             dispatch(returnErrors(errorMsg, 404));\r\n//     }\r\n// }\r\n\r\nexport const saveUserTableSettings = (settings: any): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch) => {\r\n        dispatch(setItemsLoading());\r\n        dispatch({\r\n            type: SET_TABLE_STATE,\r\n            payload: { ...settings }\r\n        })\r\n    }\r\n\r\nexport const addItemSpec = (record: unknown, store: string): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch, getState: () => RootState) => {\r\n        dispatch(setItemsLoading);\r\n        const routerConfig = getRoutesAndActionTypes(store)\r\n        if (!routerConfig) {\r\n            dispatch(clearMessages())\r\n            dispatch(returnMessages(\"Get Item Specification is currently not available \", 202, SERVICE_UNAVAILABLE))\r\n            return;\r\n        }\r\n\r\n        dispatch(returnMessages(\"Working on online price retrieval...\\nPlease wait.\", 202, routerConfig.type.ADD_ITEM_SPEC))\r\n        axios.put(`/api/${routerConfig.routes}/item-specification/`, record, tokenConfig(getState))\r\n            .then(res => {\r\n                dispatch({\r\n                    type: routerConfig.type.ADD_ITEM_SPEC,\r\n                    payload: res.data\r\n                })\r\n                dispatch(clearMessages())\r\n                dispatch(returnMessages(res.data.msg, res.status))\r\n            })\r\n            .catch(e => {\r\n                dispatch(returnErrors(e.response.data.msg, e.response.status))\r\n            })\r\n    }\r\n"],"names":["StatusBadge","_ref","record","undefined","upc","_jsx","SubStatusBadge","MainStatusBadge","_ref2","hasOffersActive","fulfillmentChannel","_step","hasActiveOffers","identifiers","filter","identifier","offers","_iterator","_createForOfIteratorHelper","s","n","done","value","some","_ref3","FulfillmentChannel","err","e","f","isWmsQtyActive","wmsQuantity","isMerchantOfferActive","isAmazonOfferActive","isOfferActive","status","msg","Badge","text","_ref4","Link","Typography","DropDownMoreActionMenu","buttonSetting","block","size","type","menuItems","key","label","Button","_objectSpread","children","danger","onClick","Menu","items","OnEditingActionMenu","actions","_jsxs","Space","stopPropagation","save","cancel","editable","isEditing","editingKey","disabled","publish","edit","Dropdown","trigger","menu","DownOutlined","EditableCell","editing","dataIndex","title","inputType","index","restProps","_objectWithoutProperties","_excluded","inputNode","InputNumber","min","Input","Form","name","rules","required","message","concat","style","mergedColumns","columns","map","col","onCell","mainColumns","width","searchable","sorter","a","b","defaultSortOrder","render","_","ActionMenu","nestedColumns","filters","onFilter","includes","FormTable","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","searchInput","setTableUserSettings","tableUserSettings","searchText","searchedRowId","searchedColumn","setState","addSearchPropsToColumns","getColumnSearchProps","handleScrollPosition","clickedItem","locateSearchedItem","_id","scrollToTableRow","document","searchedItem","find","row","findIndex","rowIndex","getElementsByClassName","scrollTop","handleSearch","selectedKeys","confirm","trimSearchText","normalizeStringValue","handleReset","clearFilters","filterDropdown","setSelectedKeys","padding","ref","placeholder","onChange","target","onPressEnter","marginBottom","display","icon","SearchOutlined","filteredValue","state","filterIcon","filtered","color","toString","toLowerCase","onFilterDropdownOpenChange","visible","setTimeout","_this$searchInput$cur","current","select","rel","href","link","Highlighter","highlightStyle","backgroundColor","searchWords","autoEscape","textToHighlight","React","_createClass","data","this","dataSource","_prevProps","prevState","saveUserTableSettings","_this$props","loading","handleRowClick","searchPropsColumns","Table","showSorterTooltip","onRow","connect","Title","ContentHeader","subTitle","navigate","useNavigate","PageHeader","paddingBlock","paddingInline","onBack","level","whiteSpace","wordWrap","SubContentHeader","Divider","plain","className","ContentLayout","Row","gutter","justifyContent","Col","span","replace","normalizeObjectStringValuesToLowerCase","obj","Object","keys","forEach","normalizeValue","trim","setItemsLoading","ITEMS_LOADING","getRoutesAndActionTypes","selectedStore","MICROSOFT","routes","CLEAR_ERRORS","CLEAR_MICROSOFT_ERRORS","GET_ITEM_DETAIL","GET_MS_ITEM_DETAIL","GET_ITEM_ONLINE_PRICE","GET_MS_ITEMS_ONLINE_PRICE","ITEMS_ONLINE_PRICE_LOADING","MS_ITEMS_ONLINE_PRICE_LOADING","ON_RETRIEVED_ONLINE_PRICE","ON_RETRIEVED_MS_ITEMS_ONLINE_PRICE","FAILED_RETRIEVE_DEALS_INFO","RETRIEVE_MS_ITEMS_ONLINE_PRICE_ERROR","BESTBUY","CLEAR_BESTBUY_ERRORS","GET_BB_ITEM_DETAIL","ADD_ITEM_SPEC","ADD_BB_ITEM_SPEC","GET_BB_ITEMS_ONLINE_PRICE","BB_ITEMS_ONLINE_PRICE_LOADING","ON_RETRIEVED_BB_ITEMS_ONLINE_PRICE","RETRIEVE_BB_ITEMS_ONLINE_PRICE_ERROR","signalPriceCrawler","store","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dispatch","getState","routerConfig","wrap","_context","prev","next","abrupt","axios","tokenConfig","then","res","returnMessages","catch","clearMessages","response","GET_ERRORS","stop","_x","_x2","apply","arguments","handlePriceCrawlFinished","_callee2","_context2","_x3","handlePriceCrawlError","_callee3","_context3","clearErrors","returnErrors","_x4","getDealDetail","abortSignal","_callee4","_context4","signal","deal","price_timestamps","ts","date","moment","format","payload","console","error","_x5","_x6","settings","_ref5","_callee5","_context5","SET_TABLE_STATE","_x7"],"sourceRoot":""}