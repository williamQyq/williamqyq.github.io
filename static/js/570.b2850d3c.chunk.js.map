{"version":3,"file":"static/js/570.b2850d3c.chunk.js","mappings":"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","sources":["redux/actions/bestbuy.action.ts","pages/Bot/StoreAnalyticCards.jsx","pages/Bot/Bestbuy.bot.tsx","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["import axios, { CanceledError } from 'axios';\r\nimport Moment from 'moment';\r\nimport {\r\n    GET_BB_ITEMS,\r\n    SET_TABLE_STATE,\r\n    ITEMS_LOADING_BB,\r\n    MOST_VIEWED_ITEMS_LOADING,\r\n    GET_BB_MOST_VIEWED_ITEMS,\r\n    GET_BB_VIEWED_ULTIMATELY_BOUGHT_ITEMS,\r\n    GET_BB_ALSO_BOUGHT_ITEMS,\r\n    GET_BESTBUY_API_ERRORS,\r\n    GET_ERRORS\r\n} from './types';\r\nimport { tokenConfig } from './authActions';\r\nimport { returnErrors } from './errorActions';\r\nimport { ThunkAction, AnyAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../store/store';\r\nimport { AppDispatch, DealsDataSourceType, myAxiosError } from '../interface';\r\n\r\nexport const getBestbuyDeals = (abortSignal?: AbortSignal): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch, getState: () => RootState) => {\r\n        dispatch(setItemsLoading());\r\n        axios.get<DealsDataSourceType>(\r\n            '/api/bestbuy/v1/deals', {\r\n            signal: abortSignal,\r\n            ...tokenConfig(getState)\r\n        })\r\n            .then(res => {\r\n                //modify created date time format in res.data\r\n                let deals = Object.values(res.data).map(deal => {\r\n                    deal.captureDate = Moment(deal.captureDate).format(\"MM-DD-YYYY HH:mm:ss\");\r\n                    return deal;\r\n                })\r\n                dispatch({\r\n                    type: GET_BB_ITEMS,\r\n                    payload: deals\r\n                })\r\n            })\r\n            .catch((err: CanceledError<any> | myAxiosError) => {\r\n                if (err.name === \"CanceledError\") {\r\n                    console.log(`Request canceled`, err.name);\r\n                } else {\r\n                    let myErr = err as myAxiosError;\r\n                    dispatch(returnErrors(\r\n                        myErr.response.data.msg,\r\n                        myErr.response.status,\r\n                    ));\r\n                }\r\n\r\n            })\r\n    };\r\n\r\nconst setItemsLoading = () => {\r\n    return {\r\n        type: ITEMS_LOADING_BB\r\n    };\r\n};\r\n\r\n/**\r\n * \r\n * @param store \r\n * @param clickedId \r\n * @returns \r\n * @description \r\n *  #TODO save table user settings\r\n */\r\nexport const setTableSettings = (store: string, clickedId: string): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch) => {\r\n        dispatch({\r\n            type: SET_TABLE_STATE,\r\n            payload: {\r\n                store,\r\n                clickedId\r\n            }\r\n        });\r\n    }\r\n\r\n/**\r\n * @description Get Bestbuy affiliate most viewed products\r\n * @param categoryId \r\n * @returns \r\n */\r\nexport const getMostViewedOnCategoryId = (categoryId: string): ThunkAction<any, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch, getState: () => RootState) => {\r\n        dispatch(setMostViewedItemsLoading());\r\n        console.log('Get most viewed request sent...')\r\n        axios.get(`/api/bestbuy/peek/v0/getMostViewed/categoryId/${categoryId}`, tokenConfig(getState)).then(res => {\r\n            dispatch({\r\n                type: GET_BB_MOST_VIEWED_ITEMS,\r\n                payload: res.data\r\n            })\r\n        }).catch(err => {\r\n            dispatch(resetBestbuyApiMostViewedItems());\r\n            dispatch(returnErrors(err.response.data.msg, err.response.status, GET_BESTBUY_API_ERRORS))\r\n        })\r\n\r\n    }\r\n\r\n/**\r\n * @description Get Bestbuy affiliate api\r\n * @param sku \r\n * @returns \r\n */\r\nexport const getViewedUltimatelyBoughtOnSku = (sku: string): ThunkAction<any, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch, getState: () => RootState) => {\r\n        dispatch(setMostViewedItemsLoading());\r\n        axios.get<unknown>(`/api/bestbuy/peek/v0/getViewedUltimatelyBought/sku/${sku}`, tokenConfig(getState)).then(res => {\r\n            dispatch({\r\n                type: GET_BB_VIEWED_ULTIMATELY_BOUGHT_ITEMS,\r\n                payload: res.data\r\n            });\r\n        }).catch(err => {\r\n            dispatch(resetBestbuyApiMostViewedItems());\r\n            dispatch(returnErrors(err.response.data.msg, err.response.status, GET_BESTBUY_API_ERRORS));\r\n        })\r\n\r\n    }\r\n\r\n/**\r\n * @description Get BestBuy affiliate also bought api.\r\n * @param sku \r\n * @returns \r\n */\r\nexport const getAlsoBoughtOnSku = (sku: string): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch, getState: () => RootState) => {\r\n        dispatch(setMostViewedItemsLoading());\r\n        axios.get<unknown>(`/api/bestbuy/peek/v0/getAlsoBought/sku/${sku}`, tokenConfig(getState)).then(res => {\r\n            dispatch({\r\n                type: GET_BB_ALSO_BOUGHT_ITEMS,\r\n                payload: res.data\r\n            });\r\n        }).catch(err => {\r\n            dispatch(resetBestbuyApiMostViewedItems());\r\n            dispatch(returnErrors(err.response.data.msg, err.response.status, GET_BESTBUY_API_ERRORS));\r\n        });\r\n    }\r\n\r\n/**\r\n * @description Dispatch action type for Redux\r\n * @returns \r\n * \r\n */\r\nconst setMostViewedItemsLoading = () => {\r\n    return {\r\n        type: MOST_VIEWED_ITEMS_LOADING\r\n    };\r\n};\r\nconst resetBestbuyApiMostViewedItems = () => {\r\n    return {\r\n        type: GET_BESTBUY_API_ERRORS\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\nimport { Card, Col, Row, Skeleton, Typography, Menu, Input } from 'antd';\r\nimport { SubContentHeader } from '@src/component/utils/Layout';\r\nimport './Store.scss';\r\nimport { getAlsoBoughtOnSku, getViewedUltimatelyBoughtOnSku } from '@redux-action/bestbuy.action';\r\n\r\nconst { Text } = Typography;\r\nconst { Search } = Input;\r\n\r\nexport const MostViewedSearchBox = (props) => {\r\n    const { name, reduxAction } = props;\r\n    const dispatch = useDispatch();\r\n    const { mostViewedItemsLoading } = useSelector((state) => state.bestbuy)\r\n    const [status, setStatus] = useState('')\r\n    const onSearch = (value) => {\r\n        // let isValid = /^\\d{7}$/.test(value) //regex way check valid\r\n        let output = value.split('').filter(ele => !isNaN(ele));\r\n        let isValid = output.length === 7\r\n        if (isValid) {\r\n            setStatus('')\r\n            dispatch(reduxAction(value))\r\n        } else {\r\n            setStatus('error')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Search\r\n            placeholder={name}\r\n            allowClear\r\n            enterButton=\"Search\"\r\n            size=\"large\"\r\n            onSearch={onSearch}\r\n            loading={mostViewedItemsLoading}\r\n            status={status}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nconst menuItems = [\r\n    {\r\n        key: \"allLaptops\",\r\n        label: \"All Laptops\"\r\n    },\r\n    {\r\n        key: \"asusLaptops\",\r\n        label: \"Asus Laptops\"\r\n    },\r\n    {\r\n        key: \"dellLaptops\",\r\n        label: \"Dell Laptops\",\r\n    },\r\n    {\r\n        key: \"hpLaptops\",\r\n        label: \"Hp Laptops\"\r\n    },\r\n    {\r\n        key: \"lenovoLaptops\",\r\n        label: \"Lenovo Laptops\"\r\n    },\r\n    {\r\n        key: \"samsungLaptops\",\r\n        label: \"Samsung Laptops\"\r\n    },\r\n    {\r\n        key: \"microsoftSurfaceLaptops\",\r\n        label: \"Surface\"\r\n    },\r\n    {\r\n        key: \"alsoBoughtOnSku\",\r\n        label: <MostViewedSearchBox name={'alsoBoughtOnSku'} reduxAction={getAlsoBoughtOnSku} />\r\n    },\r\n    {\r\n        key: \"ultiBoughtOnSku\",\r\n        label: <MostViewedSearchBox name={'ultimatelyBoughtOnSku'} reduxAction={getViewedUltimatelyBoughtOnSku} />\r\n    }\r\n]\r\n\r\n\r\nclass StoreAnalyticCards extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedMenuKey: 'allLaptops'\r\n        }\r\n\r\n    }\r\n\r\n    handleCardGridClick = () => {\r\n\r\n    }\r\n    handleSelectedMenuKeyChange = (key) => {\r\n        this.setState({ selectedMenuKey: key })\r\n        this.props.switchContent(key)\r\n    }\r\n    render() {\r\n        const mostViewedItems = this.props.mostViewedItems ? this.props.mostViewedItems : []\r\n        const { selectedMenuKey } = this.state;\r\n        return (\r\n            <>\r\n                <SubContentHeader title=\"Most Viewed Ultimately Bought\" />\r\n                <Menu\r\n                    onClick={e => this.handleSelectedMenuKeyChange(e.key)}\r\n                    selectedKeys={[selectedMenuKey]}\r\n                    mode=\"horizontal\"\r\n                    items={menuItems}\r\n                />\r\n                <Skeleton active loading={this.props.loading}>\r\n                    <Row gutter={[16, 16]}>\r\n                        {\r\n                            mostViewedItems.map((item, i) => {\r\n                                return (\r\n                                    <Col span={6} key={i.toString()} >\r\n                                        <Card\r\n                                            className='most-viewed-cards'\r\n                                            hoverable\r\n                                            title={item.names.title}\r\n                                            cover={\r\n                                                <div className='card-cover'>\r\n                                                    <img className=\"card-image\" alt=\"laptop\" src={item.images.standard} />\r\n                                                </div>\r\n                                            }\r\n                                        >\r\n                                            <Card.Meta\r\n                                                className='card-content'\r\n                                                title={`rank - ${i + 1}`}\r\n                                                description={\r\n                                                    <>\r\n                                                        <Text>Sku - {item.sku}</Text><br />\r\n                                                        <Text>Regular - ${item.prices.regular}</Text><br />\r\n                                                        <Text>Current - ${item.prices.current}</Text><br />\r\n                                                        <Text>Score: {item.customerReviews.averageScore}    Count: {item.customerReviews.count}</Text>\r\n                                                    </>\r\n                                                }\r\n                                            />\r\n                                        </Card>\r\n                                    </Col>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Row>\r\n                </Skeleton>\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nStoreAnalyticCards.proppTypes = {\r\n    mostViewedItems: PropTypes.array.isRequired,\r\n    loading: PropTypes.bool.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    mostViewedItems: state.bestbuy.mostViewedItems,\r\n    loading: state.bestbuy.mostViewedItemsLoading\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(StoreAnalyticCards);","import React from 'react';\r\nimport { ConnectedProps, connect } from 'react-redux';\r\nimport { storeType } from '@src/component/utils/cmpt.global';\r\nimport {\r\n    getBestbuyDeals,\r\n    getMostViewedOnCategoryId,\r\n    getViewedUltimatelyBoughtOnSku,\r\n    getAlsoBoughtOnSku\r\n} from '@redux-action/bestbuy.action';\r\nimport { SocketContext } from '@src/component/socket/SocketProvider';\r\nimport DealsTable, { DealsDataTableProps } from '@view/Bot/DealsTable';\r\nimport StoreAnalyticCards from './StoreAnalyticCards.jsx'\r\n// import BackTopHelper from 'component/utility/BackTop.jsx';\r\nimport {\r\n    handlePriceCrawlError,\r\n    handlePriceCrawlFinished\r\n} from '@redux-action/deal.action';\r\nimport { RootState } from '@src/redux/store/store';\r\nimport { SocketAction, SocketRoom } from '@src/component/socket/type';\r\nimport { ContentLayout } from '@src/component/utils/Layout';\r\n\r\ninterface BestbuyElectronicsCatgIds {\r\n    ALL_LAPTOPS: string,\r\n    ASUS_LAPTOPS: string,\r\n    DELL_LAPTOPS: string,\r\n    HP_LAPTOPS: string,\r\n    LENOVO_LAPTOPS: string,\r\n    SAMSUNG_LAPTOPS: string,\r\n    SURFACE: string\r\n}\r\n\r\nexport const categoryIdGroup: BestbuyElectronicsCatgIds = {\r\n    ALL_LAPTOPS: 'pcmcat247400050000',\r\n    ASUS_LAPTOPS: 'pcmcat190000050007',\r\n    DELL_LAPTOPS: 'pcmcat140500050010',\r\n    HP_LAPTOPS: 'pcmcat1513015098109',\r\n    LENOVO_LAPTOPS: 'pcmcat230600050000',\r\n    SAMSUNG_LAPTOPS: 'pcmcat1496261338353',\r\n    SURFACE: 'pcmcat1492808199261'\r\n}\r\n\r\ninterface IProps extends PropsFromRedux { };\r\ninterface IState {\r\n    targetStore: string;\r\n    items: Record<string, string>[];\r\n    loading: boolean;\r\n    mostViewedCatgId?: string;\r\n    mostViewedSku?: string;\r\n    mostViewedItems?: any[];\r\n    alsoBoughtItems?: any[];\r\n}\r\n\r\nclass BestBuyDeals extends React.Component<IProps, IState> {\r\n    static contextType = SocketContext  //This part is important to access context values which are socket\r\n    declare context: React.ContextType<typeof SocketContext>;\r\n    abortController?: AbortController;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            items: props.items, //store redux deal data state, prevent re-render\r\n            loading: props.loading, //store redux loading state, prevent re-render\r\n            targetStore: storeType.BESTBUY,\r\n            mostViewedCatgId: undefined,\r\n            mostViewedSku: undefined,\r\n            mostViewedItems: undefined,\r\n            alsoBoughtItems: undefined\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @socket\r\n     * Trigger View updates on retrieve \"bestbuy deals update\"\r\n     */\r\n    componentDidMount() {\r\n        const { socket } = this.context;\r\n        const { targetStore } = this.state;\r\n        // let abortSignal = this.abortController ? this.abortController.signal : undefined;\r\n        this.abortController = new AbortController();\r\n        this.props.getBestbuyDeals(this.abortController.signal);\r\n        if (socket && socket.active) {\r\n            socket.emit(SocketAction.subscribe, SocketRoom.dealsRoom);\r\n\r\n            socket.on(SocketAction.dealsUpdated, () => {\r\n                this.props.getBestbuyDeals(this.abortController?.signal);\r\n            })\r\n            socket.on(SocketAction.retrievedBBItemsOnlinePrice, (data) => {\r\n                console.log(this.state.targetStore, data)\r\n                this.props.handlePriceCrawlFinished(targetStore);\r\n            })\r\n            socket.on(SocketAction.retrievedMSItemsOnlinePrice, (err) => {\r\n                console.error(targetStore, err);\r\n                this.props.handlePriceCrawlError(targetStore);\r\n            })\r\n        }\r\n    }\r\n\r\n    cancelRequest = () => {\r\n        this.abortController?.abort();\r\n    }\r\n    componentWillUnmount() {\r\n        const { socket } = this.context;\r\n        if (socket) {\r\n            socket.removeAllListeners();\r\n        }\r\n        this.cancelRequest();\r\n    }\r\n\r\n    /**\r\n     * @description dispatch thunkAction on request mostViewed bestbuy catg products\r\n     * @param laptopCatg \r\n     * @returns \r\n     */\r\n    switchContent = (laptopCatg: string) => {\r\n        let mostViewedCatgId = undefined;\r\n\r\n        switch (laptopCatg) {\r\n            case 'allLaptops':\r\n                mostViewedCatgId = categoryIdGroup.ALL_LAPTOPS;\r\n                break;\r\n            case 'asusLaptops':\r\n                mostViewedCatgId = categoryIdGroup.ASUS_LAPTOPS;\r\n                break;\r\n            case 'dellLaptops':\r\n                mostViewedCatgId = categoryIdGroup.DELL_LAPTOPS;\r\n                break;\r\n            case 'hpLaptops':\r\n                mostViewedCatgId = categoryIdGroup.HP_LAPTOPS\r\n                break;\r\n            case 'lenovoLaptops':\r\n                mostViewedCatgId = categoryIdGroup.LENOVO_LAPTOPS;\r\n                break;\r\n            case 'samsungLaptops':\r\n                mostViewedCatgId = categoryIdGroup.SAMSUNG_LAPTOPS;\r\n                break;\r\n            case 'microsoftSurfaceLaptops':\r\n                mostViewedCatgId = categoryIdGroup.SURFACE\r\n                break;\r\n            default:\r\n                mostViewedCatgId = categoryIdGroup.ALL_LAPTOPS;\r\n                return;\r\n        }\r\n\r\n        if (mostViewedCatgId) {\r\n            this.props.getMostViewedOnCategoryId(mostViewedCatgId);\r\n            this.setState({ mostViewedCatgId });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const data: DealsDataTableProps = {\r\n            storeName: this.state.targetStore,\r\n            items: this.state.items,\r\n            loading: this.state.loading\r\n        }\r\n\r\n        const categoryProps = {\r\n            ...this.state,\r\n            switchContent: this.switchContent\r\n        }\r\n\r\n        return (\r\n            <ContentLayout>\r\n                <DealsTable {...data} />\r\n                <StoreAnalyticCards {...categoryProps} />\r\n            </ContentLayout>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    tableState: state.item.tableState,\r\n    loading: state.bestbuy.loading,\r\n    items: state.bestbuy.items,\r\n    mostViewedItems: state.bestbuy.mostViewedItems,\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    getBestbuyDeals,\r\n    getAlsoBoughtOnSku,\r\n    getMostViewedOnCategoryId,\r\n    getViewedUltimatelyBoughtOnSku,\r\n    handlePriceCrawlFinished,\r\n    handlePriceCrawlError\r\n}\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(BestBuyDeals);\r\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["setItemsLoading","type","ITEMS_LOADING_BB","getViewedUltimatelyBoughtOnSku","sku","_ref4","_asyncToGenerator","_regeneratorRuntime","mark","_callee4","dispatch","getState","wrap","_context4","prev","next","setMostViewedItemsLoading","axios","concat","tokenConfig","then","res","GET_BB_VIEWED_ULTIMATELY_BOUGHT_ITEMS","payload","data","catch","err","resetBestbuyApiMostViewedItems","returnErrors","response","msg","status","GET_BESTBUY_API_ERRORS","stop","_x6","_x7","apply","arguments","getAlsoBoughtOnSku","_ref5","_callee5","_context5","GET_BB_ALSO_BOUGHT_ITEMS","_x8","_x9","MOST_VIEWED_ITEMS_LOADING","Text","Typography","Search","Input","MostViewedSearchBox","props","name","reduxAction","useDispatch","mostViewedItemsLoading","useSelector","state","bestbuy","_useState","useState","_useState2","_slicedToArray","setStatus","_jsx","placeholder","allowClear","enterButton","size","onSearch","value","split","filter","ele","isNaN","length","loading","menuItems","key","label","StoreAnalyticCards","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","handleCardGridClick","handleSelectedMenuKeyChange","setState","selectedMenuKey","switchContent","_createClass","_this2","mostViewedItems","this","_jsxs","_Fragment","children","SubContentHeader","title","Menu","onClick","e","selectedKeys","mode","items","Skeleton","active","Row","gutter","map","item","i","Col","span","Card","className","hoverable","names","cover","alt","src","images","standard","description","prices","regular","current","customerReviews","averageScore","count","toString","React","proppTypes","PropTypes","connect","categoryIdGroup","ALL_LAPTOPS","ASUS_LAPTOPS","DELL_LAPTOPS","HP_LAPTOPS","LENOVO_LAPTOPS","SAMSUNG_LAPTOPS","SURFACE","BestBuyDeals","abortController","cancelRequest","_this$abortController","abort","laptopCatg","mostViewedCatgId","undefined","getMostViewedOnCategoryId","targetStore","storeType","mostViewedSku","alsoBoughtItems","socket","context","AbortController","getBestbuyDeals","signal","emit","SocketAction","SocketRoom","on","_this2$abortControlle","console","log","handlePriceCrawlFinished","error","handlePriceCrawlError","removeAllListeners","storeName","categoryProps","_objectSpread","ContentLayout","DealsTable","contextType","SocketContext","mapDispatchToProps","abortSignal","_ref","_callee","_context","deals","Object","values","deal","captureDate","Moment","format","GET_BB_ITEMS","myErr","_x","_x2","categoryId","_ref3","_callee3","_context3","GET_BB_MOST_VIEWED_ITEMS","_x4","_x5","tableState","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","propName","componentName","location","propFullName","secret","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}