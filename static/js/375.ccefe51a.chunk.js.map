{"version":3,"file":"static/js/375.ccefe51a.chunk.js","mappings":"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","sources":["component/utils/Layout.tsx","assets/global.ts","pages/DealChart/DealPriceChart.tsx","pages/DealChart/DealDetail.tsx","redux/actions/deal.action.ts"],"sourcesContent":["import React from 'react';\r\nimport { Divider, Typography } from \"antd\";\r\nimport { PageHeader } from \"@ant-design/pro-components\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Row, Col } from 'antd';\r\n\r\nconst { Title } = Typography;\r\ninterface IProps {\r\n    title: string,\r\n    subTitle?: string\r\n}\r\nexport const ContentHeader: React.FC<IProps> = ({ title, subTitle }: IProps) => {\r\n\r\n    const navigate = useNavigate();\r\n    const handleGoBack = () => {\r\n        navigate(-1);\r\n    }\r\n    return (\r\n        <PageHeader\r\n            // className=\"site-page-header\"\r\n            style={{ width: '100%', paddingBlock: 0, paddingInline: 0 }}\r\n            onBack={handleGoBack}\r\n            title={\r\n                <Title level={2} style={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>{title}</Title>\r\n            }\r\n            subTitle={subTitle}\r\n        />\r\n    );\r\n}\r\n\r\nexport const SubContentHeader: React.FC<IProps> = ({ title, subTitle }) => {\r\n    return (\r\n        <Divider plain>\r\n            <PageHeader className=\"site-page-header\" title={title} subTitle={subTitle} />\r\n        </Divider>\r\n\r\n    );\r\n}\r\n\r\nexport const ContentLayout: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n    return (\r\n        <Row gutter={[24, 24]} style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <Col span={18}>\r\n                {children}\r\n            </Col>\r\n        </Row>\r\n    )\r\n}","const UTILS = {\r\n    COLORS: {\r\n        BLACK: \"#121212\",\r\n    },\r\n    COLORS_RGB: {\r\n        BLACK: \"rgb(28,28,30)\",\r\n        GREEN: \"rgb(52,199,89)\",\r\n        RED: \"rgb(255, 59,48)\",\r\n        WHITE: \"rgb(229,229,234)\",\r\n        GREY: \"rgb(142,142,147)\",\r\n    }\r\n}\r\n\r\n\r\nexport default UTILS;","import React, { useEffect } from 'react';\r\nimport Chart, { ChartConfiguration } from 'chart.js/auto';\r\nimport { DealDataType } from '@redux-action/deal.action';\r\n\r\nimport UTILS from \"@src/assets/global\"\r\n\r\ntype Labels = any[];\r\ntype DataPoints = Labels;\r\ninterface ChartData {\r\n    labels: Labels,\r\n    datasets: any[]\r\n}\r\n\r\nexport const setChartData = (labels: Labels, datapoints: DataPoints, borderColor: string) => {\r\n    return ({\r\n\r\n        labels: labels,\r\n        datasets: [\r\n            {\r\n                label: '$',\r\n                data: datapoints,\r\n                borderColor: borderColor,\r\n                fill: false,\r\n                tension: 0.4\r\n            }\r\n            // , {\r\n            //     label: 'History',\r\n            //     data: datapoints,\r\n            //     borderColor: UTILS.COLORS.BLACK,\r\n            //     fill: false\r\n            // }\r\n        ]\r\n    })\r\n}\r\nexport const setChartConfig = (data: ChartData): ChartConfiguration => {\r\n    return ({\r\n        type: 'line',\r\n        data: data,\r\n        options: {\r\n            responsive: true,\r\n            plugins: {\r\n                title: {\r\n                    display: false,\r\n                    text: 'Chart.js Line Chart - Cubic interpolation mode'\r\n                },\r\n                legend: {\r\n                    display: false\r\n                }\r\n            },\r\n            interaction: {\r\n                intersect: false,\r\n            },\r\n            scales: {\r\n                x: {\r\n                    display: true,\r\n                    title: {\r\n                        display: true\r\n                    },\r\n                    grid: {\r\n                        display: false\r\n                    }\r\n                },\r\n                y: {\r\n                    display: false,\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Value'\r\n                    },\r\n                    suggestedMin: 200,\r\n                    suggestedMax: 1500,\r\n                    grid: {\r\n                        display: false\r\n                    }\r\n                }\r\n            }\r\n        },\r\n    })\r\n}\r\n\r\nexport function setLabels(priceTimeStamps: any[]) {\r\n    let labels = [];\r\n    labels = priceTimeStamps.map(ts => {\r\n        return ts.date;\r\n    })\r\n    labels.unshift(priceTimeStamps[0].date)   //double insert first element of timestamps, make it a line.\r\n    return labels;\r\n}\r\n\r\n//set price chart datapoints\r\nexport function setDataPoints(priceTimeStamps: any[]) {\r\n\r\n    let datapoints = [];\r\n    const first_ts = priceTimeStamps[0];\r\n\r\n    datapoints = priceTimeStamps.map(ts => {\r\n        return ts.price;\r\n    })\r\n    datapoints.unshift(first_ts.price); //double insert first element of timestamps, make it a line.\r\n    return datapoints;\r\n}\r\n\r\nexport function setColorOnPriceUpOrDrop(priceDiff: number) {\r\n    let borderColor = UTILS.COLORS_RGB.BLACK;\r\n\r\n    if (priceDiff > 0) {\r\n        borderColor = UTILS.COLORS_RGB.RED\r\n    } else if (priceDiff < 0) {\r\n        borderColor = UTILS.COLORS_RGB.GREEN\r\n    }\r\n    return borderColor;\r\n}\r\n\r\n/**\r\n * @description Price Chart Component\r\n */\r\ninterface IProps {\r\n    dealData?: DealDataType;\r\n    discount: number;\r\n}\r\n\r\nconst PriceHistoryChart: React.FC<IProps> = ({ dealData, discount }: IProps) => {\r\n    const chartRef = React.useRef<Chart>();\r\n\r\n\r\n    useEffect(() => {\r\n        if (dealData) {\r\n            const labels = setLabels(dealData.price_timestamps);\r\n            const datapoints = setDataPoints(dealData.price_timestamps);\r\n            const borderColor = setColorOnPriceUpOrDrop(discount);\r\n\r\n            const data = setChartData(labels, datapoints, borderColor);\r\n            const config: ChartConfiguration = setChartConfig(data);\r\n            if (chartRef.current) {\r\n                chartRef.current.destroy();\r\n            }\r\n            chartRef.current = new Chart('chart', config);\r\n        }\r\n        return () => {\r\n            if (chartRef.current) {\r\n                chartRef.current.destroy();\r\n            }\r\n        };\r\n    }, [dealData, discount]);\r\n\r\n    return (\r\n        <canvas id='chart' width={\"900px\"} />\r\n    );\r\n}\r\n\r\nexport default PriceHistoryChart;\r\n","import React, { useEffect, useMemo } from 'react';\r\nimport './ItemDetail.scss';\r\nimport { Col, Row, Skeleton, Typography, Spin } from 'antd';\r\n// import OrderPanel from './ItemDetailOrderCard.jsx';\r\nimport { DealDataType, getDealDetail } from '@redux-action/deal.action';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { AppDispatch } from '@src/redux/interface.js';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '@src/redux/store/store';\r\nimport { ContentHeader } from '@src/component/utils/Layout';\r\nimport PriceHistoryChart from './DealPriceChart';\r\nimport { SyncOutlined } from '@ant-design/icons';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst DealDetail: React.FC = () => {\r\n    const dispatch = useDispatch<AppDispatch>();\r\n    const { dealData, loading }: { dealData?: DealDataType, loading: boolean } = useSelector((state: RootState) => state.item);\r\n    const { storeId, dealId } = useParams();\r\n    useEffect(() => {\r\n        let abortController = new AbortController();\r\n        if (storeId && dealId)\r\n            dispatch(getDealDetail(storeId, dealId, abortController.signal));\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        }\r\n    }, [dealId]);\r\n\r\n    // @description the ratio of changed price.\r\n    const getPriceDelta = (deal?: DealDataType): number => {\r\n        let delta: number = deal?.priceDiff ? Number(((deal.priceDiff / deal.currentPrice) * 100).toFixed(2)) : 0;\r\n        return delta;\r\n    }\r\n\r\n    const discount: number = useMemo(() =>\r\n        dealData?.priceDiff ? Number(dealData.priceDiff.toFixed(2)) : 0\r\n\r\n        , [dealData]);\r\n\r\n    const priceDelta: number = useMemo(() =>\r\n        getPriceDelta(dealData)\r\n        , [dealData]);\r\n\r\n    const latestRecordTime: string = useMemo(() => {\r\n        if (dealData?.price_timestamps) {\r\n            let ts = dealData.price_timestamps;\r\n            return ts.length > 0 ? ts[ts.length - 1].date.toString() : \"Not Available\";\r\n        }\r\n        return \"Not Available\";\r\n    }, [dealData])\r\n\r\n    //product name, product latest price\r\n    const { name, currentPrice } = dealData || {};\r\n    return (\r\n        <Skeleton loading={loading} active>\r\n            {name && (\r\n                <Row gutter={[24, 24]} style={{ \"display\": \"flex\", \"justifyContent\": \"center\" }} >\r\n                    <Col span={18} >\r\n                        <ContentHeader title={name} />\r\n                        <Col style={{marginLeft:16}}>\r\n                            <Row >\r\n                                <Title level={5} className=\"price-row-price\">${currentPrice}</Title>\r\n                                <Spin indicator={<SyncOutlined spin />} style={{ fontSize: 0, color: 'black' }} />\r\n                            </Row>\r\n                            <Title level={5}>${discount} | {priceDelta}%</Title>\r\n                            <Title level={5}>Last Record Time: {latestRecordTime}</Title>\r\n                        </Col>\r\n                        <PriceHistoryChart dealData={dealData} discount={discount} />\r\n                    </Col>\r\n                </Row>\r\n            )}\r\n        </Skeleton>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nexport default DealDetail;\r\n","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport moment from 'moment';\r\nimport { clearErrors, returnErrors } from './errorActions'\r\nimport {\r\n    // GET_ITEMS,\r\n    BESTBUY,\r\n    MICROSOFT,\r\n    GET_ERRORS,\r\n    ITEMS_LOADING,\r\n    SET_TABLE_STATE,\r\n    GET_MS_ITEM_DETAIL,\r\n    GET_BB_ITEM_DETAIL,\r\n    ADD_BB_ITEM_SPEC,\r\n    GET_MS_ITEMS_ONLINE_PRICE,\r\n    GET_BB_ITEMS_ONLINE_PRICE,\r\n    MS_ITEMS_ONLINE_PRICE_LOADING,\r\n    BB_ITEMS_ONLINE_PRICE_LOADING,\r\n    CLEAR_MICROSOFT_ERRORS,\r\n    CLEAR_BESTBUY_ERRORS,\r\n    ON_RETRIEVED_MS_ITEMS_ONLINE_PRICE,\r\n    ON_RETRIEVED_BB_ITEMS_ONLINE_PRICE,\r\n    SERVICE_UNAVAILABLE,\r\n    RETRIEVE_BB_ITEMS_ONLINE_PRICE_ERROR,\r\n    RETRIEVE_MS_ITEMS_ONLINE_PRICE_ERROR,\r\n} from './types.js';\r\nimport { tokenConfig } from './authActions';\r\nimport { clearMessages, returnMessages } from './messageActions';\r\nimport { RootState, AppDispatch } from '../store/store';\r\nimport { AnyAction, ThunkAction } from '@reduxjs/toolkit';\r\nimport { myAxiosError, myAxiosResponse } from '../interface.js';\r\n\r\nconst setItemsLoading = () => ({\r\n    type: ITEMS_LOADING\r\n});\r\n\r\nfunction getRoutesAndActionTypes(selectedStore: string) {\r\n    switch (selectedStore) {\r\n        case MICROSOFT:\r\n            return {\r\n                routes: 'microsoft',\r\n                type: {\r\n                    CLEAR_ERRORS: CLEAR_MICROSOFT_ERRORS,\r\n                    GET_ITEM_DETAIL: GET_MS_ITEM_DETAIL,\r\n                    GET_ITEM_ONLINE_PRICE: GET_MS_ITEMS_ONLINE_PRICE,\r\n                    ITEMS_ONLINE_PRICE_LOADING: MS_ITEMS_ONLINE_PRICE_LOADING,\r\n                    ON_RETRIEVED_ONLINE_PRICE: ON_RETRIEVED_MS_ITEMS_ONLINE_PRICE,\r\n                    FAILED_RETRIEVE_DEALS_INFO: RETRIEVE_MS_ITEMS_ONLINE_PRICE_ERROR\r\n                }\r\n            }\r\n        case BESTBUY:\r\n            return {\r\n                routes: 'bestbuy',\r\n                type: {\r\n                    CLEAR_ERRORS: CLEAR_BESTBUY_ERRORS,\r\n                    GET_ITEM_DETAIL: GET_BB_ITEM_DETAIL,\r\n                    ADD_ITEM_SPEC: ADD_BB_ITEM_SPEC,\r\n                    GET_ITEM_ONLINE_PRICE: GET_BB_ITEMS_ONLINE_PRICE,\r\n                    ITEMS_ONLINE_PRICE_LOADING: BB_ITEMS_ONLINE_PRICE_LOADING,\r\n                    ON_RETRIEVED_ONLINE_PRICE: ON_RETRIEVED_BB_ITEMS_ONLINE_PRICE,\r\n                    FAILED_RETRIEVE_DEALS_INFO: RETRIEVE_BB_ITEMS_ONLINE_PRICE_ERROR\r\n                }\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n}\r\n\r\nexport const signalPriceCrawler = (store: string): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch, getState: () => RootState) => {\r\n        const routerConfig = getRoutesAndActionTypes(store);    //get routes and action types on store selection\r\n        if (!routerConfig) return;\r\n        dispatch({ type: routerConfig.type.ITEMS_ONLINE_PRICE_LOADING });\r\n        axios.get(`/api/${routerConfig.routes}/crawl/v1/laptop/prices`, tokenConfig(getState))\r\n            .then((res: myAxiosResponse) => {\r\n                dispatch(returnMessages(res.data.msg, res.status, routerConfig.type.ITEMS_ONLINE_PRICE_LOADING));\r\n            })\r\n            .catch(err => {\r\n                dispatch(clearMessages())\r\n                dispatch(returnMessages(err.response.msg, err.response.status, GET_ERRORS))\r\n            })\r\n    }\r\n\r\nexport const handlePriceCrawlFinished = (store: string): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch) => {\r\n        const routerConfig = getRoutesAndActionTypes(store);    //get routes and action types on store selection\r\n        if (!routerConfig) return;\r\n        dispatch({\r\n            type: routerConfig.type.GET_ITEM_ONLINE_PRICE\r\n        })\r\n        dispatch(clearMessages())\r\n        dispatch(returnMessages(`${store} Bot Finished!`, 200, routerConfig.type.GET_ITEM_ONLINE_PRICE))\r\n    }\r\n\r\nexport const handlePriceCrawlError = (store: string): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch) => {\r\n        const routerConfig = getRoutesAndActionTypes(store);\r\n        if (!routerConfig) return;\r\n        dispatch({\r\n            type: routerConfig.type.GET_ITEM_ONLINE_PRICE\r\n        })\r\n        dispatch(clearErrors(routerConfig.type.CLEAR_ERRORS))\r\n        dispatch(returnErrors(`${store} Bot throw Exceptions`, 400, routerConfig.type.FAILED_RETRIEVE_DEALS_INFO))\r\n    }\r\n\r\nexport interface DealDataType {\r\n    link: string,\r\n    name: string,\r\n    sku: string,\r\n    qty: number,\r\n    upc: string,\r\n    price_timestamps: { price: number, date: Date | string }[],\r\n    currentPrice: number,\r\n    priceDiff: number,\r\n}\r\n\r\nexport const getDealDetail = (store: string, _id: string, abortSignal?: AbortSignal): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch, getState: () => RootState) => {\r\n        dispatch(setItemsLoading());\r\n        const routerConfig = getRoutesAndActionTypes(store);    //get routes and action types on store selection\r\n        axios.get<any, AxiosResponse<DealDataType>>(\r\n            `/api/${routerConfig?.routes}/v1/deal/detail/id/${_id}`,\r\n            {\r\n                ...tokenConfig(getState),\r\n                signal: abortSignal\r\n            })\r\n            .then((res: AxiosResponse<DealDataType>) => {\r\n                let deal = res.data;\r\n                deal.price_timestamps.forEach(ts => {\r\n                    ts.date = moment(ts.date).format(\"MMM Do YYYY HH:mm a\");\r\n                });\r\n                dispatch({\r\n                    type: routerConfig!.type.GET_ITEM_DETAIL,\r\n                    payload: deal\r\n                })\r\n            })\r\n            .catch((err: myAxiosError) => {\r\n                if (err.response) {\r\n                    dispatch(returnErrors(err.response.data.msg, err.response.status))\r\n                } else {\r\n                    console.error(err)\r\n                }\r\n            })\r\n    }\r\n\r\n// export const getItems = (store) => dispatch => {\r\n//     switch (store) {\r\n//         case MICROSOFT:\r\n//             getMSItems();\r\n//             break;\r\n//         case BESTBUY:\r\n//             getBestbuyDeals();\r\n//             break;\r\n//         default:\r\n//             let errorMsg = `[ERROR] getItems invalid ${store}`\r\n//             dispatch(returnErrors(errorMsg, 404));\r\n//     }\r\n// }\r\n\r\nexport const saveUserTableSettings = (settings: any): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch) => {\r\n        dispatch(setItemsLoading());\r\n        dispatch({\r\n            type: SET_TABLE_STATE,\r\n            payload: { ...settings }\r\n        })\r\n    }\r\n\r\nexport const addItemSpec = (record: unknown, store: string): ThunkAction<void, RootState, any, AnyAction> =>\r\n    async (dispatch: AppDispatch, getState: () => RootState) => {\r\n        dispatch(setItemsLoading);\r\n        const routerConfig = getRoutesAndActionTypes(store)\r\n        if (!routerConfig) {\r\n            dispatch(clearMessages())\r\n            dispatch(returnMessages(\"Get Item Specification is currently not available \", 202, SERVICE_UNAVAILABLE))\r\n            return;\r\n        }\r\n\r\n        dispatch(returnMessages(\"Working on online price retrieval...\\nPlease wait.\", 202, routerConfig.type.ADD_ITEM_SPEC))\r\n        axios.put(`/api/${routerConfig.routes}/item-specification/`, record, tokenConfig(getState))\r\n            .then(res => {\r\n                dispatch({\r\n                    type: routerConfig.type.ADD_ITEM_SPEC,\r\n                    payload: res.data\r\n                })\r\n                dispatch(clearMessages())\r\n                dispatch(returnMessages(res.data.msg, res.status))\r\n            })\r\n            .catch(e => {\r\n                dispatch(returnErrors(e.response.data.msg, e.response.status))\r\n            })\r\n    }\r\n"],"names":["Title","Typography","ContentHeader","_ref","title","subTitle","navigate","useNavigate","_jsx","PageHeader","style","width","paddingBlock","paddingInline","onBack","level","whiteSpace","wordWrap","children","SubContentHeader","_ref2","Divider","plain","className","ContentLayout","_ref3","Row","gutter","display","justifyContent","Col","span","COLORS","BLACK","COLORS_RGB","GREEN","RED","WHITE","GREY","dealData","discount","chartRef","React","useEffect","data","labels","datapoints","borderColor","datasets","label","fill","tension","setChartData","priceTimeStamps","map","ts","date","unshift","setLabels","price_timestamps","first_ts","price","setDataPoints","priceDiff","UTILS","setColorOnPriceUpOrDrop","config","type","options","responsive","plugins","text","legend","interaction","intersect","scales","x","grid","y","suggestedMin","suggestedMax","setChartConfig","current","destroy","Chart","id","dispatch","useDispatch","_useSelector","useSelector","state","item","loading","_useParams","useParams","storeId","dealId","abortController","AbortController","getDealDetail","signal","abort","useMemo","Number","toFixed","priceDelta","deal","currentPrice","latestRecordTime","length","toString","name","Skeleton","active","_jsxs","marginLeft","Spin","indicator","SyncOutlined","spin","fontSize","color","PriceHistoryChart","setItemsLoading","ITEMS_LOADING","getRoutesAndActionTypes","selectedStore","MICROSOFT","routes","CLEAR_ERRORS","CLEAR_MICROSOFT_ERRORS","GET_ITEM_DETAIL","GET_MS_ITEM_DETAIL","GET_ITEM_ONLINE_PRICE","GET_MS_ITEMS_ONLINE_PRICE","ITEMS_ONLINE_PRICE_LOADING","MS_ITEMS_ONLINE_PRICE_LOADING","ON_RETRIEVED_ONLINE_PRICE","ON_RETRIEVED_MS_ITEMS_ONLINE_PRICE","FAILED_RETRIEVE_DEALS_INFO","RETRIEVE_MS_ITEMS_ONLINE_PRICE_ERROR","BESTBUY","CLEAR_BESTBUY_ERRORS","GET_BB_ITEM_DETAIL","ADD_ITEM_SPEC","ADD_BB_ITEM_SPEC","GET_BB_ITEMS_ONLINE_PRICE","BB_ITEMS_ONLINE_PRICE_LOADING","ON_RETRIEVED_BB_ITEMS_ONLINE_PRICE","RETRIEVE_BB_ITEMS_ONLINE_PRICE_ERROR","signalPriceCrawler","store","_asyncToGenerator","_regeneratorRuntime","mark","_callee","getState","routerConfig","wrap","_context","prev","next","abrupt","axios","concat","tokenConfig","then","res","returnMessages","msg","status","catch","err","clearMessages","response","GET_ERRORS","stop","_x","_x2","apply","arguments","handlePriceCrawlFinished","_callee2","_context2","_x3","handlePriceCrawlError","_callee3","_context3","clearErrors","returnErrors","_x4","_id","abortSignal","_ref4","_callee4","_context4","_objectSpread","forEach","moment","format","payload","console","error","_x5","_x6","saveUserTableSettings","settings","_ref5","_callee5","_context5","SET_TABLE_STATE","_x7"],"sourceRoot":""}