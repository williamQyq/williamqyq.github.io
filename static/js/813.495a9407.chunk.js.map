{"version":3,"file":"static/js/813.495a9407.chunk.js","mappings":"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","sources":["component/Operation/InitWorkflow/utilities.tsx","component/utils/types.enum.ts","component/Operation/InitWorkflow/ProdDetachSpecInput.tsx","component/utils/MyProCard.tsx","redux/actions/actionsHelper.ts","redux/actions/operationAction.ts","component/Operation/InitWorkflow/InitSkuProcess/SkuEditableTable.tsx","component/Operation/InitWorkflow/TemplateDownloader.tsx","component/utils/SpreadSheetComponent.tsx","component/Operation/InitWorkflow/InitSkuProcess/SkuConfigInputStepForm.tsx","component/Operation/InitWorkflow/InitSkuProcess/InitSkuAsinMapping.tsx","component/Operation/InitWorkflow/ProdKeySpecInput.tsx","component/Operation/InitWorkflow/InitWorkflow.tsx","component/utils/FileUploader.tsx","component/utils/Layout.tsx"],"sourcesContent":["\r\nimport { FormInstance, Button } from \"antd\";\r\nimport React, { ReactNode } from \"react\";\r\nimport { Accessories } from \"@src/component/utils/cmpt.interface\";\r\n\r\nexport const waitTime = (time: number = 100) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve(true);\r\n        }, time);\r\n    });\r\n};\r\n\r\ninterface SubmitterProps {\r\n    form?: FormInstance<any>,\r\n    stepsCount: number,\r\n    curStep: number,\r\n    next: (step: number) => void,\r\n    prev: () => void,\r\n    nextCatag?: () => void\r\n}\r\n\r\nexport const Submitter = (props: SubmitterProps): ReactNode => {\r\n    const { form, curStep, stepsCount, next, prev, nextCatag } = props;\r\n\r\n    const handleDone = async () => {\r\n        nextCatag?.();\r\n    }\r\n    //submit form, values catch by stepform onFinish\r\n    const handleNext = async () => {\r\n        await form?.validateFields()\r\n            .then((_) => {\r\n                form?.submit();\r\n                next(curStep)\r\n            })\r\n    }\r\n    const handlePrev = () => {\r\n        prev();\r\n    }\r\n\r\n    const hasNext = curStep < stepsCount ? true : false;\r\n    const hasPrev = curStep > 0 ? true : false;\r\n    const isLastStep = curStep === stepsCount - 1 ? true : false;\r\n    return (\r\n        <>\r\n            {\r\n                hasNext && !isLastStep && <Button type=\"primary\" onClick={handleNext}>Next </Button>\r\n            }\r\n            {\r\n                hasPrev && !isLastStep && <Button type=\"primary\" onClick={handlePrev}>Prev</Button>\r\n            }\r\n            {\r\n                isLastStep && <Button type=\"primary\" onClick={handleDone}>Done</Button>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n// Create duplicate valueEnum select options for ProColumn \r\nexport function createAccessoriesEnumObj<T = Accessories>(accsOptions: T[]): Map<string, T | \"None\"> {\r\n    let keyAccsMap = new Map<string, T | \"None\">();\r\n    // let valueEnum: Record<string, T | \"None\"> = {};\r\n\r\n    accsOptions.forEach(value => {\r\n        keyAccsMap.set(`${value}_0`, value);\r\n        keyAccsMap.set(`${value}_1`, value);\r\n    })\r\n\r\n    keyAccsMap.set(\"None\", \"None\");\r\n\r\n    return keyAccsMap;\r\n}","/**\r\n * @description: Catergory.enum\r\n * \r\n */\r\nexport enum StepStatus {\r\n    error = 'error',\r\n    process = 'process',\r\n    finish = 'finish',\r\n    wait = 'wait'\r\n}\r\n\r\n\r\n/**\r\n * @description: accessories.enum\r\n * \r\n */\r\nexport enum RAM {\r\n    DDR4_4 = \"4GB\",\r\n    DDR4_8 = \"8GB\",\r\n    DDR4_16 = \"16GB\",\r\n    DDR4_32 = \"32GB\"\r\n}\r\nexport enum SSD {\r\n    PCIE_128 = \"PCIE128\",\r\n    PCIE_256 = \"PCIE256\",\r\n    PCIE_512 = \"PCIE512\",\r\n    PCIE_1024 = \"PCIE1024\",\r\n    PCIE_2048 = \"PCIE2048\"\r\n}\r\nexport enum HDD {\r\n    HDD_1TB = \"1TB\",\r\n    HDD_2TB = \"2TB\",\r\n    HDD_3TB = \"3TB\"\r\n}\r\nexport enum OS {\r\n    W10H = \"W10H\",\r\n    W11H = \"W11H\",\r\n    W10P = \"W10P\",\r\n    W11P = \"W11P\"\r\n}\r\n\r\n","import {\r\n    ProCard,\r\n    ProFormRadio,\r\n    ProFormSelect,\r\n    ProFormText,\r\n    StepsForm,\r\n} from '@ant-design/pro-components';\r\nimport { message } from 'antd';\r\nimport React, { useState } from 'react';\r\n// import FileUpload from '@src/component/utils/FileUploader';\r\nimport { waitTime } from './utilities';\r\nimport { StepComponentProps } from '@src/component/utils/cmpt.interface';\r\nimport { HDD, OS, RAM, SSD } from '@src/component/utils/types.enum';\r\nimport { AppDispatch } from '@src/redux/interface';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst defaultData = {\r\n    upc: \"987654\",\r\n    ram: [RAM.DDR4_4, RAM.DDR4_8],\r\n    ramOnboard: \"None\",\r\n    ssd: [SSD.PCIE_128],\r\n    hdd: [HDD.HDD_1TB],\r\n    os: [OS.W10H]\r\n}\r\n\r\nconst ProdDetachSpecInput: React.FC<StepComponentProps> = (props: StepComponentProps) => {\r\n    const { nextCatag } = props;\r\n    const ramOptions: RAM[] = [RAM.DDR4_4, RAM.DDR4_8, RAM.DDR4_16, RAM.DDR4_32];\r\n    const ssdOptions: SSD[] = [SSD.PCIE_128, SSD.PCIE_256];\r\n    const hddOptions: HDD[] = [HDD.HDD_1TB, HDD.HDD_2TB];\r\n    const osOptions: OS[] = [OS.W10H, OS.W10P];\r\n    const [sourceData, setSourceData] = useState<Record<string, any>>(defaultData);\r\n    const dispatch = useDispatch<AppDispatch>();\r\n\r\n    // const handlePictureUpload = (): MyThunkAction => {\r\n    //     // @TODO:\r\n    // }\r\n\r\n    return (\r\n        <StepsForm\r\n            //cutomize next prev\r\n            formProps={{\r\n                validateMessages: {\r\n                    required: 'Info is required',\r\n                },\r\n            }}\r\n            stepsRender={(_) => <></>}\r\n        >\r\n            <StepsForm.StepForm\r\n                name=\"detachableSpecs\"\r\n                title=\"Detachable Specs\"\r\n                request={async () => {\r\n                    return sourceData;\r\n                }}\r\n                isKeyPressSubmit={true}\r\n                onFinish={async (values) => {\r\n\r\n                    console.log(`set Data Source detach values:\\n`, values)\r\n                    setSourceData(values);\r\n                    await waitTime(2000);\r\n                    message.success('Process Success');\r\n                    return true;\r\n                }}\r\n            >\r\n                <ProCard\r\n                    title=\"Detachable Hardware\"\r\n                    bordered\r\n                    headerBordered\r\n                    // collapsible\r\n                    style={{\r\n                        marginBlockEnd: 16,\r\n                        minWidth: 800,\r\n                        maxWidth: '100%',\r\n                    }}\r\n                >\r\n                    <ProFormText\r\n                        name=\"upc\"\r\n                        width=\"lg\"\r\n                        label=\"UPC\"\r\n                        tooltip=\"Product UPC\"\r\n                        placeholder=\"Enter product upc\"\r\n                        rules={[{ required: true }]}\r\n                    />\r\n                    <ProFormSelect\r\n                        name=\"ram\"\r\n                        label=\"RAM Specs\"\r\n                        fieldProps={{\r\n                            mode: 'tags',\r\n                        }}\r\n                        width=\"lg\"\r\n                        placeholder={\"Pick RAM\"}\r\n                        rules={[{ required: true }]}\r\n                        options={ramOptions.map((ram) => ({\r\n                            label: ram,\r\n                            value: ram,\r\n                        }))}\r\n                    />\r\n                    <ProFormRadio.Group\r\n                        name=\"ramOnboard\"\r\n                        label=\"RAM Onboard\"\r\n                        width=\"lg\"\r\n                        options={['None', '4GB', '8GB', '16GB']}\r\n                        rules={[{ required: true }]}\r\n                    />\r\n                    <ProFormSelect\r\n                        name=\"ssd\"\r\n                        label=\"SSD\"\r\n                        fieldProps={{\r\n                            mode: 'multiple',\r\n                        }}\r\n                        width=\"lg\"\r\n                        placeholder={\"Pick SSD\"}\r\n                        rules={[{ required: true }]}\r\n                        options={ssdOptions.map((option) => ({\r\n                            label: option,\r\n                            value: option\r\n                        }))}\r\n                    />\r\n                    <ProFormSelect\r\n                        name=\"hdd\"\r\n                        label=\"HDD\"\r\n                        fieldProps={{\r\n                            mode: 'tags',\r\n                        }}\r\n                        width=\"lg\"\r\n                        placeholder={\"Pick HDD\"}\r\n                        rules={[{ required: true }]}\r\n                        options={hddOptions.map((option) => ({\r\n                            label: option,\r\n                            value: option\r\n                        }))}\r\n                    />\r\n                    <ProFormSelect\r\n                        name=\"os\"\r\n                        label=\"Operating System\"\r\n                        fieldProps={{\r\n                            mode: 'tags',\r\n                        }}\r\n                        width=\"lg\"\r\n                        placeholder={\"Pick Operating System\"}\r\n                        rules={[{ required: true }]}\r\n                        options={osOptions.map((option) => ({\r\n                            label: option,\r\n                            value: option\r\n                        }))}\r\n                    />\r\n                </ProCard>\r\n                <ProCard\r\n                    title=\"Relative Pictures\"\r\n                    bordered\r\n                    headerBordered\r\n                    collapsible\r\n                    style={{\r\n                        minWidth: 800,\r\n                        marginBlockEnd: 16,\r\n                    }}\r\n                >\r\n                    {/* <FileUpload customizedUpload={handlePictureUpload} /> */}\r\n                </ProCard>\r\n            </StepsForm.StepForm>\r\n            <StepsForm.StepForm\r\n                name=\"done\"\r\n                title=\"Done\"\r\n                onFinish={async () => {\r\n                    /*\r\n                    save form values to db\r\n                    ....\r\n                    */\r\n                    message.success('Submit Success');\r\n                    nextCatag!();\r\n                }}\r\n            >\r\n                <ProCard\r\n                    style={{\r\n                        marginBlockEnd: 16,\r\n                        minWidth: 800,\r\n                        maxWidth: '100%',\r\n                    }}\r\n                >\r\n                </ProCard>\r\n            </StepsForm.StepForm>\r\n        </StepsForm>\r\n    );\r\n};\r\n\r\nexport default ProdDetachSpecInput;","import React from 'react';\r\nimport { ProCard } from '@ant-design/pro-components';\r\n\r\ninterface IProps {\r\n    title: string | React.ReactNode;\r\n    extra?: React.ReactNode;\r\n    collapsible?: boolean;\r\n    tooltip?: string;\r\n    children: React.ReactNode;\r\n}\r\nconst MyProCard: React.FC<IProps> = (props) => {\r\n    const { title, extra, collapsible, tooltip } = props\r\n    return (\r\n        <ProCard\r\n            title={title}\r\n            extra={extra}\r\n            bordered\r\n            headerBordered\r\n            tooltip={tooltip}\r\n            collapsible={collapsible !== undefined ? collapsible : true}\r\n            style={{\r\n                marginBlockEnd: 16,\r\n                minWidth: 1000,\r\n                maxWidth: '100%',\r\n            }}\r\n        >\r\n            {props.children}\r\n        </ProCard>\r\n    );\r\n}\r\nexport default MyProCard","/**\r\n * \r\n * @param accessories e.g. \"8GB_{index}\"\r\n * @description parse and remove tailing string after underscore\r\n * @returns \"8GB\" | null //if no match\r\n */\r\nexport function parseMyAccessoryDataSource(accessory: string): string {\r\n    const matchReg = /.*_\\d*/;\r\n    let replaceReg = /_\\d*/;\r\n\r\n    if (!accessory.match(matchReg)) {\r\n        return accessory;\r\n    }\r\n\r\n    return accessory.replace(replaceReg, \"\");\r\n}\r\n\r\nexport function parseMyMultiAccessoriesDataSource(accessories: string[]): string[] {\r\n    return accessories.map(accs =>\r\n        parseMyAccessoryDataSource(accs)\r\n    );\r\n}\r\n\r\n/**\r\n * \r\n * @param accessories e.g. \"8GB_{index}\"\r\n * @description parse and get value of {value}GB_.*\r\n * @returns 8 | 0 //if no found\r\n */\r\nexport function parseRamDataSource(unparsedRam: string): number {\r\n    const ramValueMatchReg = /(?<value>\\d+)GB/;\r\n    const found = unparsedRam.match(ramValueMatchReg)\r\n    if (!found)\r\n        return 0;\r\n\r\n    return Number(found.groups!.value!);\r\n}\r\n\r\n/**\r\n * \r\n * @param accessories e.g. \"PCIE1024_{index}\"\r\n * @description parse and get value of PCIE{value}.*\r\n * @returns 1024 | 0 //if no found\r\n */\r\nexport function parseSsdDataSource(unparsedSsd: string): number {\r\n    const SsdValueMatchReg = /[A-Z]*(?<value>\\d+)/;\r\n    const found = unparsedSsd.match(SsdValueMatchReg)\r\n    if (!found)\r\n        return 0;\r\n\r\n    return Number(found.groups!.value);\r\n}","import axios, { AxiosResponse } from 'axios';\r\nimport Papa from 'papaparse';\r\nimport { Dispatch } from 'redux';\r\nimport { tokenConfig } from './authActions';\r\nimport { RootState } from '@src/redux/store/store';\r\nimport { GET_SKU_PRIME_COST, UPLOAD_PRIME_COST } from './types';\r\nimport { RcFile } from 'antd/es/upload';\r\nimport { returnMessages } from './messageActions';\r\nimport {\r\n    myAxiosResponse,\r\n    myAxiosError,\r\n    UploadPrimeCostRequestBody,\r\n    ISkuUploadFeeds,\r\n    MyThunkAction,\r\n} from '@src/redux/interface';\r\nimport { returnErrors } from './errorActions';\r\nimport { FileUploadRequestOption, InitSkuStepsFormDataType, SkuConfig } from '@src/component/utils/cmpt.interface';\r\nimport fileDownload from 'js-file-download';\r\nimport { parseMyMultiAccessoriesDataSource } from './actionsHelper';\r\n\r\n/**\r\n * \r\n * @description save productPrimeCost xlsx data to db\r\n * \r\n */\r\nexport const uploadProductsPrimeCost = (options: FileUploadRequestOption): MyThunkAction => (dispatch: Dispatch, getState: () => RootState) => {\r\n    const { file, onSuccess, onError } = options;\r\n\r\n    Papa.parse(file as RcFile, {\r\n        complete: (xlsx) => {\r\n            const uploadFile = xlsx.data;\r\n            const reqBody: UploadPrimeCostRequestBody = { fileData: uploadFile, isOverriden: true }\r\n            axios.put('/api/operationV1/primeCost/v1/ProductsPrimeCost', reqBody, tokenConfig(getState))\r\n                .then((res: myAxiosResponse) => {\r\n                    dispatch({\r\n                        type: UPLOAD_PRIME_COST\r\n                    });\r\n                    onSuccess!(res.data.msg);\r\n                    dispatch(returnMessages(res.data.msg, res.status, UPLOAD_PRIME_COST));\r\n                })\r\n                .catch((err: myAxiosError) => {\r\n                    onError!(err);\r\n                    dispatch(returnErrors(err.response.data.msg, err.response.status, UPLOAD_PRIME_COST, err.response.data.reason))\r\n                })\r\n        },\r\n        error: (error, file) => {\r\n            console.error(error);\r\n            onError!(error);\r\n        },\r\n    })\r\n}\r\n\r\nexport const downloadProductPrimeCostTemplate = (): MyThunkAction => (dispatch: Dispatch, getState) => {\r\n    axios.get('/api/operationV1/template/v1/PrimeCostXlsxTemplate', { responseType: \"blob\" })\r\n        .then((res: AxiosResponse<Blob>) => {\r\n            fileDownload(res.data, \"PrimeCostTemplate.xlsx\");\r\n        })\r\n}\r\n\r\nexport const downloadInitSkuforAmzSPFeeds = (verifiedData: SkuConfig | null): MyThunkAction => (dispatch: Dispatch, getState) => {\r\n    axios.patch('/api/operationV1/listings/v1/offers', verifiedData, { ...tokenConfig(getState), responseType: \"blob\" })\r\n        .then((res: AxiosResponse<Blob>) => {\r\n            fileDownload(res.data, \"skuUpload.xlsx\");\r\n        })\r\n        .catch((err: myAxiosError) => {\r\n            dispatch(returnErrors(err.response!.data.msg, err.response.status))\r\n        })\r\n}\r\n\r\n/**\r\n * \r\n * @param stepsFormData \r\n * @returns \r\n * \r\n * @description set redux state generated sku with prime cost price\r\n */\r\nexport const calcVerifiedSkuPrimeCost = (abortSignal: AbortSignal, stepsFormData: InitSkuStepsFormDataType): MyThunkAction => (dispatch: Dispatch, getState) => {\r\n    const { dataSource, profitRate, addon } = stepsFormData;\r\n\r\n    //ram, ssd in dataSource need to be parsed to convert from format \"8GB_0\" to \"8GB\" before requesting the primeCost.\r\n    let parsedDataSource = dataSource.map(sku => {\r\n        let parsedRam = sku.ram ? parseMyMultiAccessoriesDataSource(sku.ram) : [];\r\n        let parsedSsd = sku.ssd ? parseMyMultiAccessoriesDataSource(sku.ssd) : [];\r\n        sku.ram = parsedRam;\r\n        sku.ssd = parsedSsd;\r\n\r\n        const newDataSource = { ...sku, ram: parsedRam, ssd: parsedSsd };\r\n        return newDataSource;\r\n    })\r\n    //the value of addon \"{label:'Pen, value: 'pen', key:'pen'}[]\"\" needs to be extracted before requesting the primeCost. \r\n    let valueExtractedAddonItems = addon.map(labelItem => labelItem.value);\r\n\r\n    axios.post(`/api/operationV1/primeCost/v1/skus/profitRate/addon/dataSource`, {\r\n        dataSource: parsedDataSource,\r\n        addon: valueExtractedAddonItems,\r\n        profitRate\r\n    }, {\r\n        signal: abortSignal,\r\n        ...tokenConfig(getState)\r\n    })\r\n        .then((res: AxiosResponse<{ data: ISkuUploadFeeds | undefined }>) => {\r\n            dispatch({\r\n                type: GET_SKU_PRIME_COST,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch((err: myAxiosError) => {\r\n            dispatch(returnErrors(err.response.data.msg, err.response.status, GET_SKU_PRIME_COST, err.response.data.reason))\r\n        });\r\n}","import {\r\n    ProColumns,\r\n    EditableProTable,\r\n    EditableFormInstance,\r\n} from '@ant-design/pro-components';\r\nimport { Rule } from 'antd/es/form';\r\nimport React, { useRef, useState } from 'react';\r\nimport {\r\n    SkuDataSourceType,\r\n    HddEnum, OsEnum, RAM, SSD\r\n} from '@src/component/utils/cmpt.interface';\r\nimport { OS, HDD } from '@src/component/utils/types.enum';\r\nimport { Button } from 'antd';\r\n\r\ninterface IProps {\r\n    dataSource: readonly SkuDataSourceType[];\r\n    setDataSource: React.Dispatch<React.SetStateAction<readonly SkuDataSourceType[]>>;\r\n    accessoriesValueEnum: {\r\n        ramValueEnum: Map<string, RAM | \"None\">;\r\n        ssdValueEnum: Map<string, SSD | \"None\">;\r\n    }\r\n}\r\n\r\nconst SkuEditableTable: React.FC<IProps> = (props) => {\r\n    const { dataSource, setDataSource, accessoriesValueEnum } = props;\r\n    const [editableKeys, setEditableRowKeys] = useState<React.Key[]>([]);\r\n    const editableFormRef = useRef<EditableFormInstance>();\r\n\r\n    const { ramValueEnum, ssdValueEnum } = accessoriesValueEnum;\r\n\r\n    const defaultData: SkuDataSourceType[] = [\r\n        {\r\n            id: 624748504,\r\n            upc: \"196801739468\",\r\n            asin: \"B0BPHP6D2Z\",\r\n            ram: [\"8GB_0\", \"8GB_1\"],\r\n            ssd: [\"PCIE1024_0\"],\r\n            hdd: \"None\",\r\n            os: OS.W11H\r\n        },\r\n\r\n    ];\r\n\r\n    const hddValueEnum: HddEnum = {\r\n        \"1TB\": HDD.HDD_1TB,\r\n        \"2TB\": HDD.HDD_2TB,\r\n        \"3TB\": HDD.HDD_3TB,\r\n        \"None\": \"None\"\r\n    }\r\n    const osValueEnum: OsEnum = {\r\n        \"W11H\": OS.W11H,\r\n        \"W11P\": OS.W11P,\r\n        \"W10H\": OS.W10H,\r\n        \"W10P\": OS.W10P,\r\n        \"None\": \"None\"\r\n    }\r\n\r\n    const noSpaceRules: Rule[] = [\r\n        { required: true, message: 'Required' },\r\n        { pattern: new RegExp(/^[a-zA-Z0-9]*$/), message: \"No Space or Special Characters Allowed\" }\r\n    ]\r\n\r\n    const asinRules: Rule[] = [\r\n        { required: true, message: 'Required' },\r\n        { pattern: new RegExp(/^[a-zA-Z0-9]*$/), message: \"No Space or Special Characters Allowed\" },\r\n    ]\r\n\r\n    const columns: ProColumns<SkuDataSourceType>[] = [\r\n        {\r\n            title: 'UPC',\r\n            dataIndex: 'upc',\r\n            formItemProps: (_) => ({ rules: noSpaceRules }),\r\n            width: '15%'\r\n        },\r\n        {\r\n            title: 'Asin',\r\n            dataIndex: 'asin',\r\n            // readonly: true,\r\n            width: '15%',\r\n            formItemProps: (_) => ({ rules: asinRules }),\r\n        },\r\n        {\r\n            title: 'RAM',\r\n            key: 'ram',\r\n            tooltip: \"Unit GB\",\r\n            dataIndex: 'ram',\r\n            valueType: \"select\",\r\n            fieldProps: {\r\n                mode: \"multiple\"\r\n            },\r\n            valueEnum: ramValueEnum,\r\n        },\r\n        {\r\n            title: \"SSD\",\r\n            key: 'ssd',\r\n            tooltip: \"Unit GB\",\r\n            dataIndex: \"ssd\",\r\n            valueType: \"select\",\r\n            fieldProps: {\r\n                mode: \"multiple\"\r\n            },\r\n            valueEnum: ssdValueEnum\r\n        },\r\n        {\r\n            title: 'HDD',\r\n            key: 'hdd',\r\n            tooltip: \"Unit TB\",\r\n            dataIndex: 'hdd',\r\n            valueType: \"select\",\r\n            valueEnum: hddValueEnum,\r\n        },\r\n        {\r\n            title: 'OS',\r\n            key: 'os',\r\n            tooltip: \"Operating System\",\r\n            dataIndex: 'os',\r\n            valueType: \"select\",\r\n            valueEnum: osValueEnum,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            valueType: 'option',\r\n            width: 100,\r\n            render: (text, record, _, action) => [\r\n                <Button\r\n                    key=\"editable\"\r\n                    type=\"link\"\r\n                    onClick={() => {\r\n                        action?.startEditable?.(record.id);\r\n                    }}\r\n                >\r\n                    编辑\r\n                </Button>,\r\n                <Button\r\n                    key=\"delete\"\r\n                    type=\"link\"\r\n                    danger\r\n                    onClick={() => {\r\n                        setDataSource(dataSource.filter((item) => item.id !== record.id));\r\n                    }}\r\n                >\r\n                    删除\r\n                </Button>,\r\n                <EditableProTable.RecordCreator\r\n                    key=\"copy\"\r\n                    record={{\r\n                        ...record,\r\n                        id: (Math.random() * 1000000).toFixed(0),\r\n                    }}\r\n                >\r\n                    <Button type=\"link\">复制</Button>\r\n                </EditableProTable.RecordCreator>,\r\n            ],\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <EditableProTable<SkuDataSourceType>\r\n                style={{ height: \"40vh\" }}\r\n                rowKey=\"id\"\r\n                editableFormRef={editableFormRef}\r\n                // maxLength={5}\r\n                // controlled\r\n                scroll={{\r\n                    x: true,\r\n                }}\r\n                formItemProps={{\r\n                    rules: [\r\n                        {\r\n                            validator: async (_, value) => {\r\n                                if (value.length < 1) {\r\n                                    throw new Error('请至少添加一行记录');\r\n                                }\r\n                            },\r\n                        }\r\n                    ]\r\n                }}\r\n                columnsState={{ persistenceType: \"localStorage\" }}\r\n                recordCreatorProps={{\r\n                    newRecordType: \"dataSource\",\r\n                    position: \"bottom\",\r\n                    record: {\r\n                        id: (Math.random() * 1000000).toFixed(0),\r\n                        hdd: \"None\",\r\n                        os: OS.W11H\r\n                    },\r\n                }}\r\n                loading={false}\r\n                columns={columns}\r\n                value={dataSource}\r\n                request={async () => ({\r\n                    data: defaultData,\r\n                    success: true,\r\n                })}\r\n                onChange={setDataSource}\r\n                editable={{\r\n                    type: 'multiple',\r\n                    editableKeys,\r\n                    onSave: async (rowKey, data, row) => {\r\n                        // await waitTime(500);\r\n                    },\r\n                    onChange: setEditableRowKeys,\r\n                }}\r\n\r\n            />\r\n            {/* \r\n            <!-- for dev -->\r\n            <ProCard title=\"table data\" headerBordered collapsible defaultCollapsed>\r\n                <ProConfigProvider dark={true}>\r\n                    <ProFormField\r\n                        style={{ \"backgroundColor\": \"black\" }}\r\n                        ignoreFormItem\r\n                        fieldProps={{\r\n                            style: {\r\n                                width: '100%',\r\n                            },\r\n                        }}\r\n                        mode=\"read\"\r\n                        valueType=\"jsonCode\"\r\n                        text={JSON.stringify(dataSource)}\r\n                    />\r\n                </ProConfigProvider>\r\n            </ProCard> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SkuEditableTable;","import React from 'react';\r\nimport { HiTemplate, HiDownload } from 'react-icons/hi';\r\n\r\ninterface IProps {\r\n    handleTemplateDownload: () => any;\r\n}\r\nconst TemplateDownloader: React.FC<IProps> = (props) => {\r\n    const { handleTemplateDownload } = props;\r\n\r\n    return (\r\n        <div style={{ \"cursor\": \"pointer\" }} onClick={handleTemplateDownload}>\r\n            <HiTemplate />\r\n            <HiDownload />\r\n        </div>\r\n    );\r\n}\r\nexport default TemplateDownloader;","import React from 'react';\r\nimport { Spreadsheet } from 'react-spreadsheet';\r\n\r\ninterface IProps {\r\n\r\n}\r\nconst SpreadSheetComponent: React.FC<IProps> = () => {\r\n    const data = [\r\n        [{ value: \"UPC\" }, { value: \"Asin\" },{ value: \"RAM_1st_slot\" },{ value: \"RAM_2nd_slot\" },{ value: \"SSD_1st_slot\" },{ value: \"SSD_2nd_slot\" },{ value: \"HDD\" },{ value: \"OS\" },],\r\n        [],[],[],[],[]\r\n    ];\r\n    return (\r\n        <div>\r\n            <Spreadsheet data={data} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SpreadSheetComponent;","import React, { useCallback, useMemo, useState } from 'react';\r\nimport {\r\n    StepsForm,\r\n    ProFormCheckbox,\r\n    ProFormRadio,\r\n    ProFormSelect,\r\n    ProFormSlider,\r\n    ProFormGroup,\r\n} from '@ant-design/pro-components';\r\nimport { message, Typography, Row, Col, InputNumber } from 'antd';\r\nimport {\r\n    InitSkuStepsFormDataType,\r\n    SkuDataSourceType,\r\n    FileUploadRequestOption,\r\n} from '@src/component/utils/cmpt.interface';\r\nimport { createAccessoriesEnumObj, waitTime } from '../utilities';\r\nimport { AppDispatch, RootState } from '@src/redux/store/store';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n    calcVerifiedSkuPrimeCost,\r\n    downloadProductPrimeCostTemplate,\r\n    uploadProductsPrimeCost\r\n} from '@src/redux/actions/operationAction';\r\nimport MyProCard from '@src/component/utils/MyProCard';\r\nimport FileUploader from '@src/component/utils/FileUploader';\r\nimport SkuEditableCreationTable from './SkuEditableTable';\r\nimport TemplateDownloader from '../TemplateDownloader';\r\nimport { RAM, SSD } from '@src/component/utils/types.enum';\r\nimport SpreadSheetComponent from '@src/component/utils/SpreadSheetComponent';\r\nimport { ThunkAction, AnyAction } from '@reduxjs/toolkit';\r\n\r\n\r\nconst { StepForm } = StepsForm;\r\n\r\ninterface IProps {\r\n    dataSource: readonly SkuDataSourceType[];\r\n    setDataSource: React.Dispatch<React.SetStateAction<readonly SkuDataSourceType[]>>;\r\n    initEditableConfigOnFinish: (formValues: Partial<InitSkuStepsFormDataType>, dataSource: readonly SkuDataSourceType[]) => void;\r\n    handleProfitRateOnChange: (newProfitRate: number | null) => void;\r\n    profitRate: number | undefined;\r\n}\r\n\r\nconst defaultStepsData: Omit<InitSkuStepsFormDataType, \"dataSource\"> = {\r\n    amzAccts: [\"RS\"],\r\n    shippingTemplate: \"USPrime\",\r\n    profitRate: 7,\r\n    addon: []\r\n}\r\n\r\nconst ramOptions: RAM[] = [RAM.DDR4_4, RAM.DDR4_8, RAM.DDR4_16, RAM.DDR4_32];\r\nconst ssdOptions: SSD[] = [SSD.PCIE_2048, SSD.PCIE_1024, SSD.PCIE_512, SSD.PCIE_256, SSD.PCIE_128]\r\n\r\nconst SkuConfigInputStepForm: React.FC<IProps> = (props) => {\r\n\r\n    const {\r\n        dataSource,\r\n        setDataSource,\r\n        initEditableConfigOnFinish,\r\n        handleProfitRateOnChange,\r\n        profitRate,\r\n    } = props;\r\n\r\n    const dispatch: AppDispatch = useDispatch();\r\n    const [acceptedFile, setAcceptedFile] = useState<string>('.txt');\r\n\r\n    // generate sku and seller allowed prices, and update redux state store\r\n    const processComposedItems = useCallback((stepsFormData: Omit<InitSkuStepsFormDataType, \"dataSource\">, dataSource: readonly SkuDataSourceType[]) => {\r\n        const controller = new AbortController();\r\n        dispatch(calcVerifiedSkuPrimeCost(controller.signal, { ...stepsFormData, dataSource: dataSource }))\r\n\r\n        return () => controller.abort();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    // download sample prime cost template xlxs\r\n    const handlePrimeCostTemplateDownload = useCallback(() => {\r\n        console.log('[User Action] downloaded PrimeCostTemplate Xlsx.');\r\n        dispatch(downloadProductPrimeCostTemplate());\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handlePrimeCostUpload = (options: FileUploadRequestOption): ThunkAction<void, RootState, any, AnyAction> => {\r\n        return async (dispatch: AppDispatch) => {\r\n            dispatch(uploadProductsPrimeCost(options));\r\n        }\r\n    }\r\n    //Accessories key, type Map, e.g <4GB_0, 4GB>\r\n    const ramValueEnum = createAccessoriesEnumObj(ramOptions);\r\n    const ssdValueEnum = createAccessoriesEnumObj(ssdOptions);\r\n\r\n    return (\r\n        <StepForm\r\n            name=\"collectInfo\"\r\n            title=\"Collect Info\"\r\n            isKeyPressSubmit={true}\r\n            grid={true}\r\n            onFinish={async (formValues: Omit<InitSkuStepsFormDataType, \"dataSource\">) => {\r\n                await waitTime(1000);\r\n                message.success('Init SKU Finished');\r\n                initEditableConfigOnFinish(formValues, dataSource);\r\n                processComposedItems(formValues, dataSource);\r\n                return true;\r\n            }}\r\n            //preset accts, profit rate, shipping method\r\n            request={async () => {\r\n                return defaultStepsData;\r\n            }}\r\n        >\r\n            <MyProCard title=\"Create SKU\">\r\n                <div style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    alignItems: \"center\"\r\n                }}>\r\n                    <SkuEditableCreationTable\r\n                        dataSource={dataSource}\r\n                        setDataSource={setDataSource}\r\n                        accessoriesValueEnum={{\r\n                            ramValueEnum,\r\n                            ssdValueEnum\r\n                        }} />\r\n                    <SpreadSheetComponent />\r\n                </div>\r\n            </MyProCard>\r\n\r\n            <MyProCard title=\"Supplement Info\">\r\n                <ProFormCheckbox.Group\r\n                    name=\"amzAccts\"\r\n                    label=\"Amazon Accounts\"\r\n                    options={['RS', 'PRO']}\r\n                    tooltip=\"These skus are created for which store?\"\r\n                    rules={[\r\n                        { required: true, message: \"Must create for at least one store.\", type: 'array' }\r\n                    ]}\r\n                />\r\n                <Row>\r\n                    <Col span={18}>\r\n                        <ProFormSlider\r\n                            fieldProps={{ value: profitRate }}\r\n                            name=\"profitRate\"\r\n                            label=\"Profit Rate\"\r\n                            width=\"md\"\r\n                            min={0}\r\n                            max={25}\r\n                            marks={{\r\n                                0: '0%',\r\n                                7: \"7%\",\r\n                                15: '15%',\r\n                                20: \"20%\",\r\n                                25: '25%',\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                    <Col span={4}>\r\n                        <InputNumber\r\n                            style={{ margin: '0 16px' }}\r\n                            value={profitRate}\r\n                            formatter={(value) => `${value}%`}\r\n                            onChange={(value) => handleProfitRateOnChange(value)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <ProFormRadio.Group\r\n                    name=\"shippingTemplate\"\r\n                    label=\"Shipping Template\"\r\n                    options={['USPrime', 'Regular']}\r\n                    tooltip=\"Sku for Prime?\"\r\n                    rules={[\r\n                        { required: true, message: \"Must select one template.\", type: 'string' }\r\n                    ]}\r\n                />\r\n                <ProFormSelect.SearchSelect\r\n                    name=\"addon\"\r\n                    label=\"Add On 配件\"\r\n                    width=\"lg\"\r\n                    fieldProps={{\r\n                        labelInValue: true\r\n                    }}\r\n                    debounceTime={300}\r\n                    request={async ({ keyWords = '' }) => {\r\n                        return [\r\n                            { label: 'HDMI CABLE', value: 'hdmiCable' },\r\n                            { label: 'Pen', value: 'pen' },\r\n                        ].filter(({ value, label }) => {\r\n                            return value.includes(keyWords) || label.includes(keyWords);\r\n                        });\r\n                    }}\r\n                />\r\n            </MyProCard>\r\n\r\n            <MyProCard\r\n                title={\r\n                    <ProFormGroup >\r\n                        <Typography.Title level={4} style={{ margin: \"auto 12px auto 12px \" }}>Prime Cost Upload</Typography.Title>\r\n                        <ProFormRadio.Group\r\n                            radioType=\"button\"\r\n                            layout='vertical'\r\n                            fieldProps={{\r\n                                value: acceptedFile,\r\n                                onChange: (e) => setAcceptedFile(e.target.value)\r\n                            }}\r\n                            colProps={{\r\n                                span: 200,\r\n                            }}\r\n                            options={['.txt']}\r\n                        />\r\n                    </ProFormGroup>\r\n                }\r\n                tooltip=\"upload any missing prime cost product items in selected file extension...\"\r\n                collapsible={false}\r\n                extra={<TemplateDownloader\r\n                    handleTemplateDownload={handlePrimeCostTemplateDownload} />}\r\n            >\r\n                <FileUploader customizedUpload={handlePrimeCostUpload} />\r\n            </MyProCard>\r\n\r\n        </StepForm>\r\n    );\r\n}\r\n\r\nexport default SkuConfigInputStepForm;","import React, { useState, useCallback, useMemo } from 'react';\r\nimport { Typography, theme } from 'antd';\r\nimport { waitTime } from '../utilities';\r\nimport { HDD } from '@src/component/utils/types.enum';\r\nimport MyProCard from '@src/component/utils/MyProCard';\r\nimport {\r\n    downloadInitSkuforAmzSPFeeds,\r\n} from '@src/redux/actions/operationAction';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppDispatch } from '@src/redux/store/store';\r\nimport {\r\n    InitSkuStepsFormDataType,\r\n    StepComponentProps,\r\n    SkuDataSourceType,\r\n    Accessories,\r\n    SkuConfig,\r\n    VerifiedSellerAllowedPriceDataType\r\n} from '@src/component/utils/cmpt.interface';\r\nimport {\r\n    ProDescriptions,\r\n    StepsForm\r\n} from '@ant-design/pro-components';\r\nimport { VscUnverified, VscVerified } from 'react-icons/vsc';\r\nimport { ReduxRootState } from '@src/redux/interface';\r\nimport { parseSsdDataSource, parseRamDataSource } from '@src/redux/actions/actionsHelper';\r\nimport SkuConfigInputStepForm from './SkuConfigInputStepForm';\r\nimport { GET_SKU_PRIME_COST } from '@src/redux/actions/types';\r\nimport { css } from '@emotion/css';\r\n\r\nconst { StepForm } = StepsForm;\r\nconst { useToken } = theme;\r\n\r\nconst InitSkuAsinMapping: React.FC<StepComponentProps> = () => {\r\n    const dispatch: AppDispatch = useDispatch();\r\n    const { token } = useToken();   //antd theme token\r\n    //sku specification data source\r\n    const [dataSource, setDataSource] = useState<readonly SkuDataSourceType[]>([]);\r\n    //steps form data source, include sku specification data source in dataSource\r\n    const [stepsFormData, setStepsFormData] = useState<Partial<InitSkuStepsFormDataType> | null>(null);\r\n\r\n    //generated sku, prices from sku specification data source\r\n    const verifiedSkuDataSource = useSelector((state: ReduxRootState) => state.amazon.primeCost);\r\n    const calcPrimeCostHasError = useSelector((state: ReduxRootState) => state.error.id === GET_SKU_PRIME_COST ? true : false);\r\n\r\n    //stepsFormData combine each step form field data and sku editableTable datasource\r\n    const initEditableConfigOnFinish = (values: Partial<InitSkuStepsFormDataType>, skuDataSource: readonly SkuDataSourceType[]): void => {\r\n        setStepsFormData({ ...values, dataSource: skuDataSource });\r\n    }\r\n\r\n    const handleProfitRateOnchange = (newProfitRate: number | null) => {\r\n        if (newProfitRate) {\r\n            console.log(`[profit rate] set new profit rate ${newProfitRate}.`)\r\n            setStepsFormData({ ...stepsFormData, profitRate: newProfitRate })\r\n        }\r\n    }\r\n\r\n    const profitRate = useMemo(() => stepsFormData?.profitRate, [stepsFormData?.profitRate]);\r\n    // download sku feeds xlsx for Amz skus upload\r\n    const downloadSkuUploadFeeds = useCallback((skuConfigValues: SkuConfig | null) => {\r\n        console.log('download sku upload feeds Xlsx.');\r\n        dispatch(downloadInitSkuforAmzSPFeeds(skuConfigValues));\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <StepsForm\r\n            stepsRender={(_) => <></>}\r\n            formProps={{\r\n                validateMessages: {\r\n                    required: 'Info is required',\r\n                },\r\n            }}\r\n        >\r\n            <SkuConfigInputStepForm\r\n                dataSource={dataSource}\r\n                setDataSource={setDataSource}\r\n                handleProfitRateOnChange={handleProfitRateOnchange}\r\n                profitRate={profitRate}\r\n                initEditableConfigOnFinish={initEditableConfigOnFinish}\r\n            />\r\n\r\n            {/**...Verification Step... */}\r\n            <StepForm\r\n                name=\"verifySku\"\r\n                title=\"Verify SKU\"\r\n                isKeyPressSubmit={true}\r\n                onFinish={async (_) => {\r\n                    await waitTime(1000);\r\n                    // message.success(\"Downloaded Generated SKU Success\");\r\n                    downloadSkuUploadFeeds(verifiedSkuDataSource);\r\n                    return true;\r\n                }}\r\n\r\n            >\r\n                <MyProCard\r\n                    title=\"Generated SKU and Price\"\r\n                    extra={calcPrimeCostHasError ? (\r\n                        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                            <VscUnverified className={css`\r\n                            fill:${token.colorError};\r\n                            font-size:24px;\r\n                            `} />\r\n                            <Typography.Text type='danger'>Warning! Missing Important Prime Cost </Typography.Text>\r\n                        </div>\r\n                    ) : (\r\n                        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                            <VscVerified className={css`\r\n                            fill: ${token.colorSuccess};\r\n                            font-size: 24px;\r\n                            `} />\r\n                            <Typography.Text type=\"success\" style={{ height: \"100%\" }}>Price Verified</Typography.Text>\r\n                        </div>\r\n                    )}>\r\n                    {\r\n                        verifiedSkuDataSource ? verifiedSkuDataSource.map((skuDescr: VerifiedSellerAllowedPriceDataType) => (\r\n                            <ProDescriptions\r\n                                key={skuDescr['product-id']}\r\n                                column={2}\r\n                                dataSource={skuDescr}\r\n                                columns={[\r\n                                    {\r\n                                        title: \"SKU\",\r\n                                        key: \"sku\",\r\n                                        dataIndex: \"sku\",\r\n                                        copyable: true\r\n                                    },\r\n                                    {\r\n                                        title: \"Price\",\r\n                                        key: \"price\",\r\n                                        dataIndex: \"price\",\r\n                                        valueType: (item) => ({\r\n                                            type: 'money',\r\n                                            locale: 'en-US'\r\n                                        })\r\n                                    },\r\n                                    {\r\n                                        title: \"Min Price\",\r\n                                        key: \"minPrice\",\r\n                                        dataIndex: \"minimum-seller-allowed-price\",\r\n                                        valueType: (item) => ({\r\n                                            type: 'money',\r\n                                            locale: 'en-US'\r\n                                        })\r\n                                    },\r\n                                    {\r\n                                        title: \"Max Price\",\r\n                                        key: \"maxPrice\",\r\n                                        dataIndex: \"maximum-seller-allowed-price\",\r\n                                        valueType: (_) => ({\r\n                                            type: 'money',\r\n                                            locale: 'en-US'\r\n                                        })\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        )) : null\r\n                    }\r\n                </MyProCard>\r\n\r\n                <MyProCard title=\"Verify your Input Accessories\">\r\n                    {\r\n                        stepsFormData?.dataSource?.map(skuRowData => {\r\n                            return (\r\n                                <ProDescriptions\r\n                                    key={skuRowData.id}\r\n                                    dataSource={skuRowData}\r\n                                    column={6}\r\n                                    colon={false}\r\n                                    columns={[\r\n                                        {\r\n                                            // title: skuRowData.asin,\r\n                                            key: \"asin\",\r\n                                            dataIndex: \"asin\",\r\n                                            copyable: true\r\n                                        },\r\n                                        {\r\n                                            key: \"upc\",\r\n                                            dataIndex: \"upc\",\r\n                                            copyable: true\r\n                                        },\r\n                                        {\r\n                                            title: \"RAM\",\r\n                                            key: \"ram\",\r\n                                            dataIndex: \"ram\",\r\n                                            render: (values) => {\r\n                                                let accsValues = values as Exclude<Accessories, HDD>[];\r\n\r\n                                                let accumulatedValue = accsValues.reduce((prev: number, next: string) => {\r\n                                                    let ramValue: number = parseRamDataSource(next);\r\n                                                    return prev + ramValue;\r\n                                                }, 0);\r\n\r\n                                                return <Typography.Text>{accumulatedValue}GB </Typography.Text>\r\n                                            }\r\n                                        },\r\n                                        {\r\n                                            title: \"SSD\",\r\n                                            key: \"ssd\",\r\n                                            dataIndex: \"ssd\",\r\n                                            render: (values) => {\r\n                                                let accsValues = values as Exclude<Accessories, HDD>[];\r\n                                                let accumulatedValue = accsValues.reduce((accumSsd: number, unparsedSsd: string) => {\r\n                                                    const ssdValue = parseSsdDataSource(unparsedSsd);\r\n                                                    return accumSsd + ssdValue;\r\n                                                }, 0);\r\n\r\n                                                return <Typography.Text>PCIE{accumulatedValue}</Typography.Text>\r\n                                            }\r\n                                        },\r\n                                        {\r\n                                            title: \"HDD\",\r\n                                            key: \"hdd\",\r\n                                            dataIndex: \"hdd\",\r\n                                        },\r\n                                        {\r\n                                            title: \"OS\",\r\n                                            key: \"os\",\r\n                                            dataIndex: \"os\",\r\n                                        },\r\n                                    ]}\r\n                                />\r\n                            )\r\n                        })}\r\n\r\n                </MyProCard>\r\n            </StepForm>\r\n        </StepsForm>\r\n    );\r\n};\r\n\r\nexport default InitSkuAsinMapping;","import React from 'react';\r\nimport { StepComponentProps } from \"@src/component/utils/cmpt.interface\";\r\nimport {\r\n    ProCard,\r\n    ProFormText,\r\n    StepsForm,\r\n} from '@ant-design/pro-components';\r\nimport { message } from 'antd';\r\nimport { waitTime } from './utilities';\r\n\r\nconst sourceTextForm = [\r\n    {\r\n        name: 'upc',\r\n        width: 'lg',\r\n        label: 'UPC',\r\n        required: [{ required: true }]\r\n    },\r\n    {\r\n        name: 'cpu',\r\n        width: 'lg',\r\n        label: 'cpu',\r\n    }, {\r\n        name: 'screen',\r\n        width: 'lg',\r\n        label: 'screen',\r\n    }, {\r\n        name: 'gpu',\r\n        width: 'lg',\r\n        label: 'gpu',\r\n    },\r\n]\r\n\r\nconst ProdKeySpecInput: React.FC<StepComponentProps> = (props: StepComponentProps) => {\r\n    const { nextCatag } = props;\r\n    return (\r\n\r\n        <StepsForm\r\n            stepsRender={(_) => <></>}\r\n            formProps={{\r\n                validateMessages: {\r\n                    required: 'Info is required',\r\n                },\r\n            }}\r\n        >\r\n            <StepsForm.StepForm\r\n                name=\"keySpecs\"\r\n                title=\"Key Specs\"\r\n                onFinish={async (values) => {\r\n                    /*\r\n                    save form values to db\r\n                    ....\r\n                    */\r\n                    console.log(`set Key Spec values:\\n`, values)\r\n                    await waitTime(2000);\r\n                    message.success('KeySpec Processed Success');\r\n                    return true;\r\n                }}\r\n            >\r\n                <ProCard\r\n                    title=\"Key Specification\"\r\n                    bordered\r\n                    headerBordered\r\n                    style={{\r\n                        minWidth: 800,\r\n                        marginBlockEnd: 16,\r\n                        maxWidth: '100%',\r\n                    }}\r\n                >\r\n                    {\r\n                        sourceTextForm.map(textForm => {\r\n                            return (\r\n                                <ProFormText\r\n                                    key={textForm.name}\r\n                                    name={textForm.name}\r\n                                    width={textForm.width as 'lg'}\r\n                                    label={textForm.label}\r\n                                    placeholder={`Enter ${textForm.name}`}\r\n                                    rules={textForm.required ? textForm.required : undefined}\r\n                                />\r\n                            )\r\n                        })\r\n                    }\r\n                </ProCard>\r\n            </StepsForm.StepForm>\r\n            <StepsForm.StepForm\r\n                name=\"done\"\r\n                title=\"Done\"\r\n                onFinish={async () => {\r\n                    message.success('Submit Key Spec Success');\r\n                    nextCatag!();\r\n                }}\r\n            >\r\n                <ProCard\r\n                    style={{\r\n                        marginBlockEnd: 16,\r\n                        minWidth: 800,\r\n                        maxWidth: '100%',\r\n                    }}\r\n                >\r\n                </ProCard>\r\n            </StepsForm.StepForm>\r\n        </StepsForm>\r\n    );\r\n}\r\n\r\nexport default ProdKeySpecInput;","import React, { useEffect, useState } from 'react';\r\nimport '@src/assets/ProcessStreamStartUp.scss';\r\nimport { ContentHeader, ContentLayout } from '@src/component/utils/Layout';\r\nimport ProdDetachSpecInput from './ProdDetachSpecInput';\r\nimport InitSkuAsinMapping from './InitSkuProcess/InitSkuAsinMapping';\r\n\r\nimport { MdOutlineTipsAndUpdates } from 'react-icons/md';\r\nimport { SiAmazonaws } from 'react-icons/si';\r\nimport { IoHardwareChipOutline } from 'react-icons/io5';\r\nimport { TbListDetails } from 'react-icons/tb';\r\n\r\nimport { Row, Col, Steps } from 'antd';\r\nimport ProdKeySpecInput from './ProdKeySpecInput';\r\n\r\nconst InitNewProdWorkflow: React.FC = () => {\r\n    const [currentStep, setCurrentStep] = useState(0);\r\n    const [isScreenMaxWidthReach, setScreenMaxWidthReach] = useState<boolean>(window.innerWidth > 1470);\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setScreenMaxWidthReach(window.innerWidth > 1470);\r\n        };\r\n\r\n        handleResize(); // Call the handler once on initial render\r\n\r\n        window.addEventListener('resize', handleResize); // Add event listener\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize); // Clean up the event listener\r\n        };\r\n    }, []);\r\n    //Set current Step status: error, process finish,wait\r\n    // const getStepStatus = (index: number): StepStatus => {\r\n    //     let status = StepStatus.error;\r\n    //     if (index < currentStep) {\r\n    //         status = StepStatus.finish;\r\n    //     } else if (index === currentStep) {\r\n    //         status = StepStatus.process;\r\n    //     } else if (index > currentStep) {\r\n    //         status = StepStatus.wait;\r\n    //     }\r\n\r\n    //     return status;\r\n    // }\r\n    const next = () => {\r\n        if (currentStep + 1 < steps.length)\r\n            setCurrentStep(currentStep + 1);\r\n    }\r\n    const prev = () => {\r\n        if (currentStep - 1 >= 0)\r\n            setCurrentStep(currentStep - 1);\r\n    }\r\n    const steps = [\r\n        {\r\n            key: \"init-sku\",\r\n            title: \"Generate Amazon SKU\",\r\n            // description: \"\",\r\n            icon: <SiAmazonaws />,\r\n            content: <InitSkuAsinMapping nextCatag={next} prevCatag={prev} />\r\n        },\r\n        {\r\n            key: \"init-product-detachable-spec\",\r\n            title: 'Detachable Parts',\r\n            // description: \"RAM Slots, SSD Slots...\",\r\n            icon: <IoHardwareChipOutline />,\r\n            content: <ProdDetachSpecInput nextCatag={next} prevCatag={prev} />\r\n        },\r\n        {\r\n            key: \"init-product-key-spec\",\r\n            title: 'Key Specification',\r\n            description: \"CPU, GPU, Screen...\",\r\n            icon: <TbListDetails />,\r\n            content: <ProdKeySpecInput nextCatag={next} prevCatag={prev} />\r\n        }\r\n    ]\r\n    const miniSteps = [\r\n        {\r\n            key: \"init-product-detachable-spec\",\r\n            icon: <IoHardwareChipOutline />,\r\n            content: <ProdDetachSpecInput nextCatag={next} prevCatag={prev} />\r\n        },\r\n        {\r\n            key: \"init-product-key-spec\",\r\n            icon: <TbListDetails />,\r\n            content: <ProdKeySpecInput nextCatag={next} prevCatag={prev} />\r\n        },\r\n        {\r\n            key: \"init-sku\",\r\n            icon: <SiAmazonaws />,\r\n            content: <InitSkuAsinMapping nextCatag={next} prevCatag={prev} />\r\n        }\r\n    ]\r\n\r\n    return (\r\n\r\n        isScreenMaxWidthReach ? (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ContentHeader title=\"Init New Product\" subTitle={steps[currentStep].title} />\r\n                    </Col>\r\n                    <Col>\r\n                        <MdOutlineTipsAndUpdates />\r\n                    </Col>\r\n                </Row>\r\n                <Row >\r\n                    <Col span={21} style={{ overflow: \"auto\" }}>\r\n                        {steps[currentStep].content}\r\n                    </Col>\r\n                    <Col span={3}>\r\n                        <Steps\r\n                            responsive\r\n                            labelPlacement='vertical'\r\n                            size='small'\r\n                            type='navigation'\r\n                            direction='vertical'\r\n                            current={currentStep}\r\n                            onChange={(current: number) => setCurrentStep(current)}\r\n                            items={steps}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        ) : (\r\n            <ContentLayout>\r\n                <Row align=\"middle\">\r\n                    <Col>\r\n                        <ContentHeader title=\"Init New Product\" subTitle={steps[currentStep].title} />\r\n                    </Col>\r\n                    <Col>\r\n                        <MdOutlineTipsAndUpdates />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <div style={{ display: \"flex\", flexDirection: 'row', alignItems: \"center\" }}>\r\n                        <Steps\r\n                            type='default'\r\n                            style={{ alignItems: \"center\", marginRight: \"4px\" }}\r\n                            direction='horizontal'\r\n                            current={currentStep}\r\n                            onChange={(current: number) => setCurrentStep(current)}\r\n                            items={miniSteps}\r\n                        />\r\n                        {/* <GiRun className={css`\r\n                                    stroke: ${token.colorTextSecondary};\r\n                                    fill: ${token.colorTextSecondary};\r\n                                    font-size: 18px;\r\n                                    `} /> */}\r\n                    </div>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={24}>\r\n                        {steps[currentStep].content}\r\n                    </Col>\r\n                </Row>\r\n\r\n            </ContentLayout >\r\n        )\r\n    );\r\n\r\n}\r\nexport default InitNewProdWorkflow;","import React from 'react';\r\nimport { Upload, message } from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\nimport { useDispatch } from 'react-redux';\r\nimport { AppDispatch, RootState } from '@src/redux/store/store';\r\nimport { FileUploadRequestOption, FileUploadProps } from './cmpt.interface';\r\nimport { AnyAction, ThunkAction } from '@reduxjs/toolkit';\r\nconst { Dragger } = Upload;\r\n\r\ninterface IProps {\r\n    customizedUpload: (options: FileUploadRequestOption) => ThunkAction<void, RootState, any, AnyAction>;\r\n}\r\n\r\nconst FileUploader: React.FC<IProps> = ({ customizedUpload }: IProps) => {\r\n    const dispatch: AppDispatch = useDispatch<AppDispatch>()\r\n\r\n    const draggerProps: FileUploadProps = {\r\n        name: 'file',\r\n        multiple: true,\r\n        accept: \".txt, .csv\",\r\n        onChange(info) {\r\n            const { status, response, error } = info.file;\r\n            if (status !== 'uploading') {\r\n                console.log(info.file, info.fileList);\r\n            }\r\n            if (status === 'done') {\r\n                message.success(`${info.file.name} upload successful.\\n${response}`);\r\n            } else if (status === 'error') {\r\n                message.error(`${info.file.name} upload failed.\\n${error}`);\r\n            }\r\n        },\r\n        customRequest: ({ file, onSuccess, onError }) => {\r\n            dispatch(customizedUpload({ file, onSuccess, onError }))\r\n        },\r\n        onDrop(e) {\r\n            console.log('Dropped files', e.dataTransfer.files);\r\n        },\r\n        beforeUpload(file, fileList) {\r\n            fileList = []\r\n            // if file not csv, return false\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Dragger {...draggerProps}>\r\n            <p className=\"ant-upload-drag-icon\">\r\n                <InboxOutlined />\r\n            </p>\r\n            <p className=\"ant-upload-text\" >Click or drag file to this area to upload</p>\r\n            <p className=\"ant-upload-hint\">\r\n                Support for a single or bulk upload. Strictly prohibit from uploading company data or other\r\n                band files\r\n            </p>\r\n        </Dragger>\r\n    )\r\n}\r\n\r\nexport default FileUploader;","import React from 'react';\r\nimport { Divider, Typography } from \"antd\";\r\nimport { PageHeader } from \"@ant-design/pro-components\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Row, Col } from 'antd';\r\n\r\nconst { Title } = Typography;\r\ninterface IProps {\r\n    title: string,\r\n    subTitle?: string\r\n}\r\nexport const ContentHeader: React.FC<IProps> = ({ title, subTitle }: IProps) => {\r\n\r\n    const navigate = useNavigate();\r\n    const handleGoBack = () => {\r\n        navigate(-1);\r\n    }\r\n    return (\r\n        <PageHeader\r\n            // className=\"site-page-header\"\r\n            style={{ width: '100%', paddingBlock: 0, paddingInline: 0 }}\r\n            onBack={handleGoBack}\r\n            title={\r\n                <Title level={2} style={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>{title}</Title>\r\n            }\r\n            subTitle={subTitle}\r\n        />\r\n    );\r\n}\r\n\r\nexport const SubContentHeader: React.FC<IProps> = ({ title, subTitle }) => {\r\n    return (\r\n        <Divider plain>\r\n            <PageHeader className=\"site-page-header\" title={title} subTitle={subTitle} />\r\n        </Divider>\r\n\r\n    );\r\n}\r\n\r\nexport const ContentLayout: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n    return (\r\n        <Row gutter={[24, 24]} style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <Col span={18}>\r\n                {children}\r\n            </Col>\r\n        </Row>\r\n    )\r\n}"],"names":["waitTime","time","arguments","length","undefined","Promise","resolve","setTimeout","createAccessoriesEnumObj","accsOptions","keyAccsMap","Map","forEach","value","set","concat","RAM","SSD","HDD","OS","defaultData","upc","ram","DDR4_4","DDR4_8","ramOnboard","ssd","PCIE_128","hdd","HDD_1TB","os","W10H","props","nextCatag","ramOptions","DDR4_16","DDR4_32","ssdOptions","PCIE_256","hddOptions","HDD_2TB","osOptions","W10P","_useState","useState","_useState2","_slicedToArray","sourceData","setSourceData","useDispatch","_jsxs","StepsForm","formProps","validateMessages","required","stepsRender","_","_jsx","_Fragment","children","name","title","request","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","stop","isKeyPressSubmit","onFinish","_ref2","_callee2","values","_context2","console","log","message","_x","apply","ProCard","bordered","headerBordered","style","marginBlockEnd","minWidth","maxWidth","ProFormText","width","label","tooltip","placeholder","rules","ProFormSelect","fieldProps","mode","options","map","ProFormRadio","option","collapsible","_callee3","_context3","extra","parseMyMultiAccessoriesDataSource","accessories","accs","accessory","match","replace","uploadProductsPrimeCost","dispatch","getState","file","onSuccess","onError","Papa","complete","xlsx","reqBody","fileData","data","isOverriden","axios","tokenConfig","then","res","type","UPLOAD_PRIME_COST","msg","returnMessages","status","catch","err","returnErrors","response","reason","error","dataSource","setDataSource","accessoriesValueEnum","editableKeys","setEditableRowKeys","editableFormRef","useRef","ramValueEnum","ssdValueEnum","id","asin","W11H","hddValueEnum","HDD_3TB","osValueEnum","W11P","noSpaceRules","pattern","RegExp","asinRules","columns","dataIndex","formItemProps","key","valueType","valueEnum","render","text","record","action","Button","onClick","_action$startEditable","startEditable","call","danger","filter","item","EditableProTable","_objectSpread","Math","random","toFixed","height","rowKey","scroll","x","validator","_validator","Error","_x2","columnsState","persistenceType","recordCreatorProps","newRecordType","position","loading","success","onChange","editable","onSave","_onSave","row","_x3","_x4","_x5","handleTemplateDownload","HiTemplate","HiDownload","Spreadsheet","StepForm","defaultStepsData","amzAccts","shippingTemplate","profitRate","addon","PCIE_2048","PCIE_1024","PCIE_512","initEditableConfigOnFinish","handleProfitRateOnChange","acceptedFile","setAcceptedFile","processComposedItems","useCallback","stepsFormData","controller","AbortController","abortSignal","parsedDataSource","sku","parsedRam","parsedSsd","valueExtractedAddonItems","labelItem","signal","GET_SKU_PRIME_COST","payload","calcVerifiedSkuPrimeCost","abort","handlePrimeCostTemplateDownload","responseType","fileDownload","grid","formValues","MyProCard","display","flexDirection","alignItems","SkuEditableCreationTable","SpreadSheetComponent","ProFormCheckbox","Row","Col","span","ProFormSlider","min","max","marks","InputNumber","margin","formatter","labelInValue","debounceTime","_ref5","_callee4","_ref4","_ref4$keyWords","keyWords","_context4","_ref6","includes","ProFormGroup","Typography","level","radioType","layout","e","target","colProps","TemplateDownloader","FileUploader","customizedUpload","_ref","useToken","theme","_stepsFormData$dataSo","token","_useState3","_useState4","setStepsFormData","verifiedSkuDataSource","useSelector","state","amazon","primeCost","calcPrimeCostHasError","useMemo","downloadSkuUploadFeeds","skuConfigValues","verifiedData","SkuConfigInputStepForm","newProfitRate","skuDataSource","VscUnverified","className","css","_templateObject","_taggedTemplateLiteral","colorError","VscVerified","_templateObject2","colorSuccess","skuDescr","ProDescriptions","column","copyable","locale","skuRowData","colon","accumulatedValue","reduce","unparsedRam","ramValueMatchReg","_wrapRegExp","found","Number","groups","parseRamDataSource","accumSsd","unparsedSsd","ssdValue","SsdValueMatchReg","parseSsdDataSource","sourceTextForm","textForm","currentStep","setCurrentStep","window","innerWidth","isScreenMaxWidthReach","setScreenMaxWidthReach","useEffect","handleResize","addEventListener","removeEventListener","steps","icon","SiAmazonaws","content","InitSkuAsinMapping","prevCatag","IoHardwareChipOutline","ProdDetachSpecInput","description","TbListDetails","ProdKeySpecInput","miniSteps","ContentHeader","subTitle","MdOutlineTipsAndUpdates","overflow","Steps","responsive","labelPlacement","size","direction","current","items","ContentLayout","align","marginRight","Dragger","Upload","draggerProps","multiple","accept","info","_info$file","fileList","customRequest","onDrop","dataTransfer","files","beforeUpload","InboxOutlined","Title","navigate","useNavigate","PageHeader","paddingBlock","paddingInline","onBack","whiteSpace","wordWrap","SubContentHeader","Divider","plain","_ref3","gutter","justifyContent"],"sourceRoot":""}